X-BeenThere: golang-nuts@googlegroups.com
Received: by 10.224.20.212 with SMTP id g20ls3661426qab.0.p; Fri, 04 Dec 2009 
	07:59:26 -0800 (PST)
Received: by 10.101.159.8 with SMTP id l8mr3325932ano.28.1259942364778;
        Fri, 04 Dec 2009 07:59:24 -0800 (PST)
Received: by 10.101.159.8 with SMTP id l8mr3325931ano.28.1259942364742;
        Fri, 04 Dec 2009 07:59:24 -0800 (PST)
Return-Path: <hel...@gmail.com>
Received: from mail-yw0-f166.google.com (mail-yw0-f166.google.com [209.85.211.166])
        by gmr-mx.google.com with ESMTP id 18si289833yxe.12.2009.12.04.07.59.24;
        Fri, 04 Dec 2009 07:59:24 -0800 (PST)
Received-SPF: pass (google.com: domain of hel...@gmail.com designates 209.85.211.166 as permitted sender) client-ip=209.85.211.166;
Authentication-Results: gmr-mx.google.com; spf=pass (google.com: domain of hel...@gmail.com designates 209.85.211.166 as permitted sender) smtp.mail=hel...@gmail.com
Received: by mail-yw0-f166.google.com with SMTP id 38so3258018ywh.9
        for <golan...@googlegroups.com>; Fri, 04 Dec 2009 07:59:24 -0800 (PST)
MIME-Version: 1.0
Received: by 10.150.248.13 with SMTP id v13mr287201ybh.35.1259942364703; Fri, 
	04 Dec 2009 07:59:24 -0800 (PST)
Date: Fri, 4 Dec 2009 07:59:24 -0800 (PST)
In-Reply-To: <DEA177FF-AD3E-4399-918E-648C2811A94D@gmail.com>
X-IP: 91.39.79.235
References: <DEA177FF-AD3E-4399-918E-648C2811A94D@gmail.com>
User-Agent: G2/1.0
X-HTTP-UserAgent: Opera/9.80 (X11; Linux i686; U; en) Presto/2.2.15 
	Version/10.10,gzip(gfe),gzip(gfe)
Message-ID: <9263445f-4303-4367-90d0-8cff34f500c5@m38g2000yqd.googlegroups.com>
Subject: Re: Default interface method implementation
From: Helmar <hel...@gmail.com>
To: golang-nuts <golan...@googlegroups.com>
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

Hi,

why not factoring this method? If it is only sometimes useful, you can
simply factor this out:

typedef Foo interface {
  ...
}

typedef FooX interface {
   Foo;
   Strange(thing);
}

or so.

Regards,
-Helmar


On Dec 4, 2:56=A0am, Daniel Dilts <dilts....@gmail.com> wrote:
> I have an interface with several methods in it. =A0One of the methods has=
 an implementation that would be useful in all but a few cases (types) with=
out requiring any member data. =A0Is there some way to declare a method suc=
h that it would be reused by structs that implement the interface, but it w=
ould have the option of being overridden.

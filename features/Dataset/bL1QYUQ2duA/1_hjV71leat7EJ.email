X-BeenThere: golang-nuts@googlegroups.com
Received: by 10.101.208.8 with SMTP id k8ls3157405anq.3.p; Fri, 04 Dec 2009 
	00:14:17 -0800 (PST)
Received: by 10.101.138.33 with SMTP id q33mr2852483ann.0.1259914457404;
        Fri, 04 Dec 2009 00:14:17 -0800 (PST)
Received: by 10.101.138.33 with SMTP id q33mr2852482ann.0.1259914457385;
        Fri, 04 Dec 2009 00:14:17 -0800 (PST)
Return-Path: <i3dm...@gmail.com>
Received: from mail-yx0-f157.google.com (mail-yx0-f157.google.com [209.85.210.157])
        by gmr-mx.google.com with ESMTP id 24si206835ywh.3.2009.12.04.00.14.17;
        Fri, 04 Dec 2009 00:14:17 -0800 (PST)
Received-SPF: pass (google.com: domain of i3dm...@gmail.com designates 209.85.210.157 as permitted sender) client-ip=209.85.210.157;
Authentication-Results: gmr-mx.google.com; spf=pass (google.com: domain of i3dm...@gmail.com designates 209.85.210.157 as permitted sender) smtp.mail=i3dm...@gmail.com
Received: by mail-yx0-f157.google.com with SMTP id 29so3364130yxe.14
        for <golan...@googlegroups.com>; Fri, 04 Dec 2009 00:14:17 -0800 (PST)
MIME-Version: 1.0
Received: by 10.101.81.10 with SMTP id i10mr227233anl.2.1259914457349; Fri, 04 
	Dec 2009 00:14:17 -0800 (PST)
Date: Fri, 4 Dec 2009 00:14:17 -0800 (PST)
In-Reply-To: <DEA177FF-AD3E-4399-918E-648C2811A94D@gmail.com>
X-IP: 24.16.26.161
References: <DEA177FF-AD3E-4399-918E-648C2811A94D@gmail.com>
User-Agent: G2/1.0
X-HTTP-UserAgent: Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_5_8; en-US) 
	AppleWebKit/532.0 (KHTML, like Gecko) Chrome/4.0.203.0 Safari/532.0,gzip(gfe),gzip(gfe)
Message-ID: <a3845876-f55f-4f34-b88d-85a1eca4ff98@15g2000prz.googlegroups.com>
Subject: Re: Default interface method implementation
From: i3dmaster <i3dm...@gmail.com>
To: golang-nuts <golan...@googlegroups.com>
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

I think Go's interface is a pure interface, it does not have abstract
structure in the middle layer where you can define some common methods
and leave out others. In other words, no, you will have to implement
it in your struct.

On Dec 3, 11:56=A0pm, Daniel Dilts <dilts....@gmail.com> wrote:
> I have an interface with several methods in it. =A0One of the methods has=
 an implementation that would be useful in all but a few cases (types) with=
out requiring any member data. =A0Is there some way to declare a method suc=
h that it would be reused by structs that implement the interface, but it w=
ould have the option of being overridden.

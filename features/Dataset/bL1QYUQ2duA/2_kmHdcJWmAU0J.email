X-BeenThere: golang-nuts@googlegroups.com
Received: by 10.101.208.8 with SMTP id k8ls3196551anq.3.p; Fri, 04 Dec 2009 
	01:33:16 -0800 (PST)
Received: by 10.101.189.8 with SMTP id r8mr2902033anp.7.1259919097549;
        Fri, 04 Dec 2009 01:31:37 -0800 (PST)
Received: by 10.101.189.8 with SMTP id r8mr2902032anp.7.1259919097522;
        Fri, 04 Dec 2009 01:31:37 -0800 (PST)
Return-Path: <ziyu4...@gmail.com>
Received: from mail-gx0-f198.google.com (mail-gx0-f198.google.com [209.85.217.198])
        by gmr-mx.google.com with ESMTP id 25si212608ywh.12.2009.12.04.01.31.37;
        Fri, 04 Dec 2009 01:31:37 -0800 (PST)
Received-SPF: pass (google.com: domain of ziyu4...@gmail.com designates 209.85.217.198 as permitted sender) client-ip=209.85.217.198;
Authentication-Results: gmr-mx.google.com; spf=pass (google.com: domain of ziyu4...@gmail.com designates 209.85.217.198 as permitted sender) smtp.mail=ziyu4...@gmail.com
Received: by mail-gx0-f198.google.com with SMTP id 22so3037324gxk.17
        for <golan...@googlegroups.com>; Fri, 04 Dec 2009 01:31:37 -0800 (PST)
MIME-Version: 1.0
Received: by 10.101.158.16 with SMTP id k16mr228830ano.0.1259919097485; Fri, 
	04 Dec 2009 01:31:37 -0800 (PST)
Date: Fri, 4 Dec 2009 01:31:37 -0800 (PST)
In-Reply-To: <DEA177FF-AD3E-4399-918E-648C2811A94D@gmail.com>
X-IP: 220.128.66.129
References: <DEA177FF-AD3E-4399-918E-648C2811A94D@gmail.com>
User-Agent: G2/1.0
X-HTTP-UserAgent: Mozilla/5.0 (Windows; U; Windows NT 5.0; zh-TW; rv:1.9.1.2) 
	Gecko/20090729 Firefox/3.5.2,gzip(gfe),gzip(gfe)
Message-ID: <5edaf76d-9837-4eda-95e1-df341bd98c71@f20g2000prn.googlegroups.com>
Subject: Re: Default interface method implementation
From: ziyu_huang <ziyu4...@gmail.com>
To: golang-nuts <golan...@googlegroups.com>
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

Why do you need default implements if you can't access structure it
self ? Just use first class function. I can image you want to do that.

interface Foo {
     Func1() (bool);
     Func1()
}

func (f *Foo) DefaultFunction () {
     if f.Func1()  {
       f.Func2()
     }
}

Why not just

func FooDefaultFunction (f *Foo) {
     if f.Func1()  {
       f.Func2()
     }
}


On 12=E6=9C=884=E6=97=A5, =E4=B8=8B=E5=8D=883=E6=99=8256=E5=88=86, Daniel D=
ilts <dilts....@gmail.com> wrote:
> I have an interface with several methods in it. =C2=A0One of the methods =
has an implementation that would be useful in all but a few cases (types) w=
ithout requiring any member data. =C2=A0Is there some way to declare a meth=
od such that it would be reused by structs that implement the interface, bu=
t it would have the option of being overridden.

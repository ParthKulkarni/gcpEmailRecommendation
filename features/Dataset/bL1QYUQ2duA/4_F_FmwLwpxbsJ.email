X-BeenThere: golang-nuts@googlegroups.com
Received: by 10.90.20.3 with SMTP id 3ls4937727agt.2.p; Fri, 04 Dec 2009 
	06:31:10 -0800 (PST)
Received: by 10.91.97.2 with SMTP id z2mr3741540agl.0.1259937070046;
        Fri, 04 Dec 2009 06:31:10 -0800 (PST)
Received: by 10.91.97.2 with SMTP id z2mr3741539agl.0.1259937070006;
        Fri, 04 Dec 2009 06:31:10 -0800 (PST)
Return-Path: <chick...@gmail.com>
Received: from mail-yx0-f204.google.com (mail-yx0-f204.google.com [209.85.210.204])
        by gmr-mx.google.com with ESMTP id 11si263098gxk.9.2009.12.04.06.31.08;
        Fri, 04 Dec 2009 06:31:09 -0800 (PST)
Received-SPF: pass (google.com: domain of chick...@gmail.com designates 209.85.210.204 as permitted sender) client-ip=209.85.210.204;
Authentication-Results: gmr-mx.google.com; spf=pass (google.com: domain of chick...@gmail.com designates 209.85.210.204 as permitted sender) smtp.mail=chick...@gmail.com; dkim=pass (test mode) head...@gmail.com
Received: by yxe42 with SMTP id 42so2344490yxe.22
        for <golan...@googlegroups.com>; Fri, 04 Dec 2009 06:31:08 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=gamma;
        h=domainkey-signature:mime-version:received:in-reply-to:references
         :date:message-id:subject:from:to:cc:content-type;
        bh=4p9Sl2bSzlpIpIGWJo2kt8irTYOU1XyhZ9aONgwWlCI=;
        b=VHLo2qGLX7aZbJa48RkHlzC0X0jy3sMQYlCbrEyu+zT+lDVlXfu6i2F0W86nwlqhZm
         m+L0+8j0kvoaUYj3+EE4uXUkx/2ulhlZOzH5wUIqL+5HgRQMMssMpgfCRZbL/WtWOdaf
         NSBzX8BfZSSwg+JuKy4jdaaqFu9SLG7VMeiak=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=gamma;
        h=mime-version:in-reply-to:references:date:message-id:subject:from:to
         :cc:content-type;
        b=luYrZauTvnuKILwrtqvhC9sLva2UdHEcNcAtQ5/WsZsTvFuv8eBBma2JvBfN+LzKjl
         SAjrwue0P6x5dZlJmLB4eMTaq9sOWLpQU/gSr67ARij71AmwxJzfQeQDxrVxgsEF0PdQ
         L0jN+yaibAJuSZBSjQ0U1F6/CkLSFRL7VNGs0=
MIME-Version: 1.0
Received: by 10.150.242.2 with SMTP id p2mr5539871ybh.217.1259937068899; Fri, 
	04 Dec 2009 06:31:08 -0800 (PST)
In-Reply-To: <DEA177FF-AD3E-4399-918E-648C2811A94D@gmail.com>
References: <DEA177FF-AD3E-4399-918E-648C2811A94D@gmail.com>
Date: Fri, 4 Dec 2009 08:31:08 -0600
Message-ID: <3bde9bf80912040631l7c90de90jb6b9dda43772c067@mail.gmail.com>
Subject: Re: [go-nuts] Default interface method implementation
From: Evan Shaw <chick...@gmail.com>
To: Daniel Dilts <dilts....@gmail.com>
Cc: golan...@googlegroups.com
Content-Type: multipart/alternative; boundary=000e0cd6a7aa6e5d970479e7f52b

--000e0cd6a7aa6e5d970479e7f52b
Content-Type: text/plain; charset=ISO-8859-1

Here's a pattern I think would work:

type Interface interface {
    commonFunc();
}

type common struct {}

func (c *common) commonFunc(){ return }

type Type1 struct {
    common;
    // Other fields
}

type Type2 struct {
    common;
    // Other fields
}

type Type3 struct {
    // Some fields
}

func (t Type3) commonFunc(){ /* Some different implementation */ return }

Type1, Type2, and Type 3 all implement Interface. Type1 and Type2 share the
same implementation of commonFunc(), while Type3 does its own thing. It's a
bit cumbersome if you're doing this a lot, but arguably better than
duplicating code.

- Evan

On Fri, Dec 4, 2009 at 1:56 AM, Daniel Dilts <dilts....@gmail.com> wrote:

> I have an interface with several methods in it.  One of the methods has an
> implementation that would be useful in all but a few cases (types) without
> requiring any member data.  Is there some way to declare a method such that
> it would be reused by structs that implement the interface, but it would
> have the option of being overridden.

--000e0cd6a7aa6e5d970479e7f52b
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

Here&#39;s a pattern I think would work:<br><br>type Interface interface {<=
br>=A0=A0=A0 commonFunc();<br>}<br><br>type common struct {}<br><br>func (c=
 *common) commonFunc(){ return }<br><br>type Type1 struct {<br>=A0=A0=A0 co=
mmon;<br>
=A0=A0=A0 // Other fields<br>}<br><br>type Type2 struct {<br>=A0=A0=A0 comm=
on;<br>=A0=A0=A0 // Other fields<br>}<br><br>type Type3 struct {<br>=A0=A0=
=A0 // Some fields<br>}<br><br>func (t Type3) commonFunc(){ /* Some differe=
nt implementation */ return }<br>
<br>Type1, Type2, and Type 3 all implement Interface. Type1 and Type2 share=
 the same implementation of commonFunc(), while Type3 does its own thing. I=
t&#39;s a bit cumbersome if you&#39;re doing this a lot, but arguably bette=
r than duplicating code.<br>
<br>- Evan<br><br><div class=3D"gmail_quote">On Fri, Dec 4, 2009 at 1:56 AM=
, Daniel Dilts <span dir=3D"ltr">&lt;<a href=3D"mailto:dilts....@gmail.com"=
>dilts....@gmail.com</a>&gt;</span> wrote:<br><blockquote class=3D"gmail_qu=
ote" style=3D"border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0p=
t 0.8ex; padding-left: 1ex;">
I have an interface with several methods in it. =A0One of the methods has a=
n implementation that would be useful in all but a few cases (types) withou=
t requiring any member data. =A0Is there some way to declare a method such =
that it would be reused by structs that implement the interface, but it wou=
ld have the option of being overridden.</blockquote>
</div><br>

--000e0cd6a7aa6e5d970479e7f52b--

X-BeenThere: golang-nuts@googlegroups.com
Received: by 10.213.77.68 with SMTP id f4ls3413099ebk.2.p; Wed, 02 Dec 2009 
	11:16:08 -0800 (PST)
Received: by 10.213.41.5 with SMTP id m5mr57176ebe.26.1259781367977;
        Wed, 02 Dec 2009 11:16:07 -0800 (PST)
Received: by 10.213.41.5 with SMTP id m5mr57175ebe.26.1259781367886;
        Wed, 02 Dec 2009 11:16:07 -0800 (PST)
Return-Path: <rick.ri...@gmail.com>
Received: from ey-out-2122.google.com (ey-out-2122.google.com [74.125.78.24])
        by gmr-mx.google.com with ESMTP id 17si135229ewy.15.2009.12.02.11.16.06;
        Wed, 02 Dec 2009 11:16:06 -0800 (PST)
Received-SPF: pass (google.com: domain of rick.ri...@gmail.com designates 74.125.78.24 as permitted sender) client-ip=74.125.78.24;
Authentication-Results: gmr-mx.google.com; spf=pass (google.com: domain of rick.ri...@gmail.com designates 74.125.78.24 as permitted sender) smtp.mail=rick.ri...@gmail.com; dkim=pass (test mode) head...@gmail.com
Received: by ey-out-2122.google.com with SMTP id 22so130647eye.29
        for <golan...@googlegroups.com>; Wed, 02 Dec 2009 11:16:06 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=gamma;
        h=domainkey-signature:mime-version:received:in-reply-to:references
         :date:message-id:subject:from:to:content-type;
        bh=RHf4nj30uS6ev2tRXKegldsAdCCvfHXR0FtoqwkRDAs=;
        b=rigf5/or9Q7ukFvyd1aSEEki0T1V5P/5hDqb9smFio2I6YvU3FGzXWtTd9pv+e5Z5d
         bl/ceOQhStlkxrX24Y48sW48nrWSwDDrKxc/RBfalg7sIJU2plBH0YxZTI+vEds8If6O
         ZbQO/kU8TqG+hUG364rCagZiBtaUXX0tvfVME=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=gamma;
        h=mime-version:in-reply-to:references:date:message-id:subject:from:to
         :content-type;
        b=JqZHp53vgH6plsb1WL/sbE7XCz0O6zD4lSTIGk0iyeVRFYO1vfGxajUvwJpasxTIgZ
         1AbqkVcGYM4z+3/JKbrYdUysELKyQs5e0HGWz3T76g8L+C67XKxBha0l3VDhFW4ZKx3X
         MBgCRCHlNP94oYkLGhAsKrSbTURP/kZIFL6hM=
MIME-Version: 1.0
Received: by 10.216.90.78 with SMTP id d56mr178031wef.126.1259781366702; Wed, 
	02 Dec 2009 11:16:06 -0800 (PST)
In-Reply-To: <15d1a0790912021054p5f59ec68i1a506ac6d6d59996@mail.gmail.com>
References: <1697113c-c960-438d-876e-f3cadcfac44a@p19g2000vbq.googlegroups.com>
	 <15d1a0790912021054p5f59ec68i1a506ac6d6d59996@mail.gmail.com>
Date: Wed, 2 Dec 2009 14:16:06 -0500
Message-ID: <9810b81b0912021116s422e927dk8fb48f3bcef05e60@mail.gmail.com>
Subject: Re: [go-nuts] Simulating Generics?
From: Rick R <rick.ri...@gmail.com>
To: golang-nuts <golan...@googlegroups.com>
Content-Type: multipart/alternative; boundary=0016e6d7856ddb71190479c3b484

--0016e6d7856ddb71190479c3b484
Content-Type: text/plain; charset=ISO-8859-1

How would you make clone.CloneMap() generic for all types of maps that it
could be passed?


On Wed, Dec 2, 2009 at 1:54 PM, Jessta <jes...@gmail.com> wrote:

> On 03/12/2009, Rick Richardson <rick.ri...@gmail.com> wrote:
> > I was mucking around with interfaces for varying types and found a
> > case where I'm duplicating implementations of interface functions
> > exactly, except that the types differ. I'm hoping someone can point
> > out a way around this.
> >
> > http://gist.github.com/247357
> >
>
> I'd pull the bulk of the Clone() function out in to a seperate
> function and then just have the Cloneable.Clone() functions call that
> function.
> eg.
> func (m MapA) Clone() Cloneable{
>    return clone.CloneMap(m);
> }
> func (m MapB) Clone() Cloneable{
>   return clone.CloneMap(m);
> }
> etc.
>
> > The only workaround I can think if is create a second interface type
> > called Mapable, but I've run into roadblocks:
> >
> > http://gist.github.com/247402
> This looks kind of scary.
>
>
> - jessta
> --
> =====================
> http://jessta.id.au
>

--0016e6d7856ddb71190479c3b484
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

How would you make clone.CloneMap() generic for all types of maps that it c=
ould be passed? <br>
<br><br><div class=3D"gmail_quote">On Wed, Dec 2, 2009 at 1:54 PM, Jessta <=
span dir=3D"ltr">&lt;<a href=3D"mailto:jes...@gmail.com">jes...@gmail.com</=
a>&gt;</span> wrote:<br><blockquote class=3D"gmail_quote" style=3D"border-l=
eft: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left:=
 1ex;">
<div class=3D"im">On 03/12/2009, Rick Richardson &lt;<a href=3D"mailto:rick=
.ri...@gmail.com">rick.ri...@gmail.com</a>&gt; wrote:<br>
&gt; I was mucking around with interfaces for varying types and found a<br>
&gt; case where I&#39;m duplicating implementations of interface functions<=
br>
&gt; exactly, except that the types differ. I&#39;m hoping someone can poin=
t<br>
&gt; out a way around this.<br>
&gt;<br>
&gt; <a href=3D"http://gist.github.com/247357" target=3D"_blank">http://gis=
t.github.com/247357</a><br>
&gt;<br>
<br>
</div>I&#39;d pull the bulk of the Clone() function out in to a seperate<br=
>
function and then just have the Cloneable.Clone() functions call that<br>
function.<br>
eg.<br>
func (m MapA) Clone() Cloneable{<br>
 =A0 =A0return clone.CloneMap(m);<br>
}<br>
func (m MapB) Clone() Cloneable{<br>
 =A0 return clone.CloneMap(m);<br>
}<br>
etc.<br>
<div class=3D"im"><br>
&gt; The only workaround I can think if is create a second interface type<b=
r>
&gt; called Mapable, but I&#39;ve run into roadblocks:<br>
&gt;<br>
&gt; <a href=3D"http://gist.github.com/247402" target=3D"_blank">http://gis=
t.github.com/247402</a><br>
</div>This looks kind of scary.<br>
<br>
<br>
- jessta<br>
<font color=3D"#888888">--<br>
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D<br>
<a href=3D"http://jessta.id.au" target=3D"_blank">http://jessta.id.au</a><b=
r>
</font></blockquote></div><br>

--0016e6d7856ddb71190479c3b484--

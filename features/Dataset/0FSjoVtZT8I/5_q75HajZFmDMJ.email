X-BeenThere: golang-nuts@googlegroups.com
Received: by 10.213.3.206 with SMTP id 14ls3475059ebo.0.p; Wed, 02 Dec 2009 
	14:12:11 -0800 (PST)
Received: by 10.213.50.142 with SMTP id z14mr92481ebf.24.1259791930754;
        Wed, 02 Dec 2009 14:12:10 -0800 (PST)
Received: by 10.213.50.142 with SMTP id z14mr92480ebf.24.1259791930712;
        Wed, 02 Dec 2009 14:12:10 -0800 (PST)
Return-Path: <rick.ri...@gmail.com>
Received: from mail-ew0-f215.google.com (mail-ew0-f215.google.com [209.85.219.215])
        by gmr-mx.google.com with ESMTP id 17si149572ewy.7.2009.12.02.14.12.09;
        Wed, 02 Dec 2009 14:12:09 -0800 (PST)
Received-SPF: pass (google.com: domain of rick.ri...@gmail.com designates 209.85.219.215 as permitted sender) client-ip=209.85.219.215;
Authentication-Results: gmr-mx.google.com; spf=pass (google.com: domain of rick.ri...@gmail.com designates 209.85.219.215 as permitted sender) smtp.mail=rick.ri...@gmail.com; dkim=pass (test mode) head...@gmail.com
Received: by ewy7 with SMTP id 7so823729ewy.28
        for <golan...@googlegroups.com>; Wed, 02 Dec 2009 14:12:09 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=gamma;
        h=domainkey-signature:mime-version:received:in-reply-to:references
         :date:message-id:subject:from:to:cc:content-type;
        bh=SvgzRHfGTOIvF6E/IE+3dCcg65mhY3dgjgnXAltx8IY=;
        b=qSQ6whTRR/EiFLTJgnHeX40awNSS6IB7gpuJztNH0pInbRpbjYLMmzMgEWE/oNYp3C
         YQ/OApNOXex5kR/5YUYDxL8CPHywnSbf0PXxlnpSV+Pubze/m1NEJIdnV2bdTbA1Jlzt
         PATHhtdfbPANHAPw/OkXoxyRYLsqHWahqgRgM=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=gamma;
        h=mime-version:in-reply-to:references:date:message-id:subject:from:to
         :cc:content-type;
        b=V7bP0R28k9BOYLmAiJMV/ky2ayfVt34D+2icOMQ2Cji2H62e5fN6O5K2SS72qS5b4e
         0lf5mGWV4juz9ZojMQAYbkZPh8ymKuuE2CD0UMCqpiAKKnPh+oiLVIWkoROulYZ5Tjcr
         mO1+NH6DKHuvqqpFt+aIvvRBZTNa3LKBJ/XnQ=
MIME-Version: 1.0
Received: by 10.216.87.206 with SMTP id y56mr235553wee.207.1259791929464; Wed, 
	02 Dec 2009 14:12:09 -0800 (PST)
In-Reply-To: <1ef198c6-1753-4332-ab37-07cb04e69b6a@m20g2000vbp.googlegroups.com>
References: <1697113c-c960-438d-876e-f3cadcfac44a@p19g2000vbq.googlegroups.com>
	 <15d1a0790912021054p5f59ec68i1a506ac6d6d59996@mail.gmail.com>
	 <9810b81b0912021116s422e927dk8fb48f3bcef05e60@mail.gmail.com>
	 <d100862b-7f74-4a4c-8b64-908b984ba8b0@t18g2000vbj.googlegroups.com>
	 <1ef198c6-1753-4332-ab37-07cb04e69b6a@m20g2000vbp.googlegroups.com>
Date: Wed, 2 Dec 2009 17:12:09 -0500
Message-ID: <9810b81b0912021412o2213f85dj73f6fae735f15c75@mail.gmail.com>
Subject: Re: [go-nuts] Re: Simulating Generics?
From: Rick R <rick.ri...@gmail.com>
To: inspector_jouve <kaush...@gmail.com>
Cc: golang-nuts <golan...@googlegroups.com>
Content-Type: multipart/alternative; boundary=0016e6d9768272597e0479c62ae8

--0016e6d9768272597e0479c62ae8
Content-Type: text/plain; charset=ISO-8859-1

Not at all. I was just trying to reduce the number of functions that I would
have to create to make a set of types conform to an interface. In the first
example I posted, the implementation of Clone for  map[string]int and
map[int]string are identical. So I was trying to find a way to create a
Clone function that works for both (and other) types.

This was harder than it sounds, as my 2nd example indicates. I haven't
figured out a way to do it yet.

The first problem I ran into, which seems to have been indicated by the
compiler, but I can't find any evidence of in the docs, was that I can't
seem to make a method of an interface conform to another interface.

The second problem was the amount of reflection required to get, manipulate
and recreate the type inside the Clone function itself. Also, the fact that
range didn't work on reflect.MapType was rather annoying ,but there were
workarounds.

It would be nice if I could simply make:  (substitute template your favorite
generic/parametric idioms)

template <typename T, typename V>
func (m map[T]V) Clone() Cloneable
{
   newMap := make(map[T]V);
   for k, v := range(m) {
     newMap[k] = v;
   }
   return newMap;
}

--0016e6d9768272597e0479c62ae8
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

Not at all. I was just trying to reduce the number of functions that I woul=
d have to create to make a set of types conform to an interface. In the fir=
st example I posted, the implementation of Clone for=A0 map[string]int and =
map[int]string are identical. So I was trying to find a way to create a Clo=
ne function that works for both (and other) types. <br>
<br>This was harder than it sounds, as my 2nd example indicates. I haven&#3=
9;t figured out a way to do it yet. <br><br>The first problem I ran into, w=
hich seems to have been indicated by the compiler, but I can&#39;t find any=
 evidence of in the docs, was that I can&#39;t seem to make a method of an =
interface conform to another interface. <br>
<br>The second problem was the amount of reflection required to get, manipu=
late and recreate the type inside the Clone function itself. Also, the fact=
 that range didn&#39;t work on reflect.MapType was rather annoying ,but the=
re were workarounds. <br>
<br>It would be nice if I could simply make:=A0 (substitute template your f=
avorite generic/parametric idioms) <br><br>template &lt;typename T, typenam=
e V&gt;<br>func (m map[T]V) Clone() Cloneable<br>{<br>=A0=A0 newMap :=3D ma=
ke(map[T]V);<br>
=A0=A0 for k, v :=3D range(m) {<br>=A0 =A0=A0 newMap[k] =3D v; <br>=A0=A0 }=
<br>=A0=A0 return newMap;<br>}<br><br><br>

--0016e6d9768272597e0479c62ae8--

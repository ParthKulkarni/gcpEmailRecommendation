X-BeenThere: golang-nuts@googlegroups.com
Received: by 10.213.77.68 with SMTP id f4ls3488141ebk.2.p; Wed, 02 Dec 2009 
	14:51:25 -0800 (PST)
Received: by 10.213.62.138 with SMTP id x10mr49281ebh.25.1259794284827;
        Wed, 02 Dec 2009 14:51:24 -0800 (PST)
Received: by 10.213.62.138 with SMTP id x10mr49280ebh.25.1259794284778;
        Wed, 02 Dec 2009 14:51:24 -0800 (PST)
Return-Path: <rick.ri...@gmail.com>
Received: from mail-ew0-f217.google.com (mail-ew0-f217.google.com [209.85.219.217])
        by gmr-mx.google.com with ESMTP id 11si156091ewy.1.2009.12.02.14.51.23;
        Wed, 02 Dec 2009 14:51:23 -0800 (PST)
Received-SPF: pass (google.com: domain of rick.ri...@gmail.com designates 209.85.219.217 as permitted sender) client-ip=209.85.219.217;
Authentication-Results: gmr-mx.google.com; spf=pass (google.com: domain of rick.ri...@gmail.com designates 209.85.219.217 as permitted sender) smtp.mail=rick.ri...@gmail.com; dkim=pass (test mode) head...@gmail.com
Received: by ewy9 with SMTP id 9so852087ewy.31
        for <golan...@googlegroups.com>; Wed, 02 Dec 2009 14:51:23 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=gamma;
        h=domainkey-signature:mime-version:received:in-reply-to:references
         :date:message-id:subject:from:to:content-type;
        bh=vhgQ8nYiB21E7nl0owV+oql0DLvX4xHnaBlsdTjaiEE=;
        b=SGiV8+/b1gj49EOwXMgFsklcQN61os5hduFWE/3D5RCH4zKP2BTlHiOzAO0onhIhUl
         MWPVrSfIIU2uRLYcG+b1aVXFbNtwRRkMnQp0S9t7kbyfvzg4y7PMe7vznxQLAd0tCJX2
         mufgL2Yo8lFK09DVHiygsynwhJTHqeT3eSCLA=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=gamma;
        h=mime-version:in-reply-to:references:date:message-id:subject:from:to
         :content-type;
        b=xXqDFZNmo785Xu8q6v7mx8e8WAjvUytKiv3DS/vMcUM7k4zET5QeTVQvWXGaGSD3LV
         nnegPMCxIDuZV2JGEdmJVgju4vO05K6phYTfaGCESKsi87KALmuhJDHNDqpkwDR+kah2
         6j8ucpV/gqPBC3dyorXUJ3AzfDPKXNL0AAcbA=
MIME-Version: 1.0
Received: by 10.216.91.18 with SMTP id g18mr230749wef.124.1259794283631; Wed, 
	02 Dec 2009 14:51:23 -0800 (PST)
In-Reply-To: <fc2b9115-166e-41f8-91c9-3c56ce0b0651@j4g2000yqe.googlegroups.com>
References: <1697113c-c960-438d-876e-f3cadcfac44a@p19g2000vbq.googlegroups.com>
	 <15d1a0790912021054p5f59ec68i1a506ac6d6d59996@mail.gmail.com>
	 <9810b81b0912021116s422e927dk8fb48f3bcef05e60@mail.gmail.com>
	 <d100862b-7f74-4a4c-8b64-908b984ba8b0@t18g2000vbj.googlegroups.com>
	 <1ef198c6-1753-4332-ab37-07cb04e69b6a@m20g2000vbp.googlegroups.com>
	 <9810b81b0912021412o2213f85dj73f6fae735f15c75@mail.gmail.com>
	 <fc2b9115-166e-41f8-91c9-3c56ce0b0651@j4g2000yqe.googlegroups.com>
Date: Wed, 2 Dec 2009 17:51:23 -0500
Message-ID: <9810b81b0912021451n42256230g251e64652a93a16a@mail.gmail.com>
Subject: Re: [go-nuts] Re: Simulating Generics?
From: Rick R <rick.ri...@gmail.com>
To: golang-nuts <golan...@googlegroups.com>
Content-Type: multipart/alternative; boundary=0016e6d58f7fc414930479c6b6fc

--0016e6d58f7fc414930479c6b6fc
Content-Type: text/plain; charset=ISO-8859-1

On Wed, Dec 2, 2009 at 5:36 PM, inspector_jouve <kaush...@gmail.com>wrote:

>
> I was thinking about similar problem - creating Map that maps anything
> to anything.
> You problem could be much more efficiently solved if you have the
> above kind of Map - then you could do with it whatever you want.
> Simple idea of how this universal Map can be implemented is this:
> define interface Key as:
> type Key interface {
>   key() string;
> }
> then write implementation of Map with 2 built-in maps inside (unless
> you want to write your own full-blown implementation of Map).
> You can put there whatever object implements Key interface. (Of
> course, brackets won't work, you have to define put(Key,value) and get
> (Key) methods).
> This is the way to implement generics in go - not through reflection,
> but through interfaces.
> (Sorry if this sounds vague - I can elaborate).
>


This would be useful for a lot of things, but not for the case where I
should be able to write a generic function which takes a type and returns
that same type, regardless of knowing what that type is.

This would be the finish touch on Go's "Dynamic typing feel in a statically
typed language"  The best part is that such magic would be a compile time
hit, not a runtime hit, as is the case with interface values.

--0016e6d58f7fc414930479c6b6fc
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

<div class=3D"gmail_quote">On Wed, Dec 2, 2009 at 5:36 PM, inspector_jouve =
<span dir=3D"ltr">&lt;<a href=3D"mailto:kaush...@gmail.com">kaush...@gmail.=
com</a>&gt;</span> wrote:<br><blockquote class=3D"gmail_quote" style=3D"bor=
der-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-=
left: 1ex;">
<br>
I was thinking about similar problem - creating Map that maps anything<br>
to anything.<br>
You problem could be much more efficiently solved if you have the<br>
above kind of Map - then you could do with it whatever you want.<br>
Simple idea of how this universal Map can be implemented is this:<br>
define interface Key as:<br>
type Key interface {<br>
 =A0 key() string;<br>
}<br>
then write implementation of Map with 2 built-in maps inside (unless<br>
you want to write your own full-blown implementation of Map).<br>
You can put there whatever object implements Key interface. (Of<br>
course, brackets won&#39;t work, you have to define put(Key,value) and get<=
br>
(Key) methods).<br>
This is the way to implement generics in go - not through reflection,<br>
but through interfaces.<br>
(Sorry if this sounds vague - I can elaborate).<br>
</blockquote></div><br><br>This would be useful for a lot of things, but no=
t for the case where I should be able to write a generic function which tak=
es a type and returns that same type, regardless of knowing what that type =
is.=A0 <br>
<br>This would be the finish touch on Go&#39;s &quot;Dynamic typing feel in=
 a statically typed language&quot;=A0 The best part is that such magic woul=
d be a compile time hit, not a runtime hit, as is the case with interface v=
alues.<br>
<br><br>

--0016e6d58f7fc414930479c6b6fc--

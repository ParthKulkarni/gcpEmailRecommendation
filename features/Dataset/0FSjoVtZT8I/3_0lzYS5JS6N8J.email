X-BeenThere: golang-nuts@googlegroups.com
Received: by 10.90.20.3 with SMTP id 3ls3837934agt.2.p; Wed, 02 Dec 2009 
	11:49:24 -0800 (PST)
Received: by 10.90.24.14 with SMTP id 14mr725991agx.13.1259783364749;
        Wed, 02 Dec 2009 11:49:24 -0800 (PST)
Received: by 10.90.24.14 with SMTP id 14mr725990agx.13.1259783364732;
        Wed, 02 Dec 2009 11:49:24 -0800 (PST)
Return-Path: <owlhu...@gmail.com>
Received: from mail-yx0-f158.google.com (mail-yx0-f158.google.com [209.85.210.158])
        by gmr-mx.google.com with ESMTP id 12si98017gxk.6.2009.12.02.11.49.24;
        Wed, 02 Dec 2009 11:49:24 -0800 (PST)
Received-SPF: pass (google.com: domain of owlhu...@gmail.com designates 209.85.210.158 as permitted sender) client-ip=209.85.210.158;
Authentication-Results: gmr-mx.google.com; spf=pass (google.com: domain of owlhu...@gmail.com designates 209.85.210.158 as permitted sender) smtp.mail=owlhu...@gmail.com
Received: by mail-yx0-f158.google.com with SMTP id 30so687864yxe.29
        for <golan...@googlegroups.com>; Wed, 02 Dec 2009 11:49:24 -0800 (PST)
MIME-Version: 1.0
Received: by 10.150.45.42 with SMTP id s42mr61190ybs.3.1259783364695; Wed, 02 
	Dec 2009 11:49:24 -0800 (PST)
Date: Wed, 2 Dec 2009 11:49:24 -0800 (PST)
In-Reply-To: <9810b81b0912021116s422e927dk8fb48f3bcef05e60@mail.gmail.com>
X-IP: 98.221.154.130
References: <1697113c-c960-438d-876e-f3cadcfac44a@p19g2000vbq.googlegroups.com> 
	<15d1a0790912021054p5f59ec68i1a506ac6d6d59996@mail.gmail.com> 
	<9810b81b0912021116s422e927dk8fb48f3bcef05e60@mail.gmail.com>
User-Agent: G2/1.0
X-HTTP-UserAgent: Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10.6; en-US; 
	rv:1.9.1.5) Gecko/20091102 Firefox/3.5.5,gzip(gfe),gzip(gfe)
Message-ID: <d100862b-7f74-4a4c-8b64-908b984ba8b0@t18g2000vbj.googlegroups.com>
Subject: Re: Simulating Generics?
From: OwlHuntr <owlhu...@gmail.com>
To: golang-nuts <golan...@googlegroups.com>
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

have an interface that all of them share... for instance an empty
interface..

type Blank_Interface Interface {}

try that approach

On Dec 2, 2:16=A0pm, Rick R <rick.ri...@gmail.com> wrote:
> How would you make clone.CloneMap() generic for all types of maps that it
> could be passed?
>
> On Wed, Dec 2, 2009 at 1:54 PM, Jessta <jes...@gmail.com> wrote:
> > On 03/12/2009, Rick Richardson <rick.ri...@gmail.com> wrote:
> > > I was mucking around with interfaces for varying types and found a
> > > case where I'm duplicating implementations of interface functions
> > > exactly, except that the types differ. I'm hoping someone can point
> > > out a way around this.
>
> > >http://gist.github.com/247357
>
> > I'd pull the bulk of the Clone() function out in to a seperate
> > function and then just have the Cloneable.Clone() functions call that
> > function.
> > eg.
> > func (m MapA) Clone() Cloneable{
> > =A0 =A0return clone.CloneMap(m);
> > }
> > func (m MapB) Clone() Cloneable{
> > =A0 return clone.CloneMap(m);
> > }
> > etc.
>
> > > The only workaround I can think if is create a second interface type
> > > called Mapable, but I've run into roadblocks:
>
> > >http://gist.github.com/247402
> > This looks kind of scary.
>
> > - jessta
> > --
> > =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
> >http://jessta.id.au

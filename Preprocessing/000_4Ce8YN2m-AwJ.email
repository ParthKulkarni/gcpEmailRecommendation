Received: by 10.50.106.166 with SMTP id gv6mr830980igb.0.1329771612349;
        Mon, 20 Feb 2012 13:00:12 -0800 (PST)
X-BeenThere: golang-nuts@googlegroups.com
Received: by 10.50.131.138 with SMTP id om10ls9525257igb.8.gmail; Mon, 20 Feb
 2012 13:00:05 -0800 (PST)
Received: by 10.43.117.132 with SMTP id fm4mr9046085icc.1.1329771605353;
        Mon, 20 Feb 2012 13:00:05 -0800 (PST)
Received: by 10.50.209.5 with SMTP id mi5msigc;
        Mon, 20 Feb 2012 06:33:38 -0800 (PST)
MIME-Version: 1.0
Received: by 10.52.93.116 with SMTP id ct20mr1850768vdb.20.1329748418574; Mon,
 20 Feb 2012 06:33:38 -0800 (PST)
Authentication-Results: ls.google.com; spf=pass (google.com: domain of
 mark....@sheffield.ac.uk designates internal as permitted sender)
 smtp.mail=mark....@sheffield.ac.uk; dkim=pass
 head...@sheffield.ac.uk
Received: by i2g2000vbv.googlegroups.com with HTTP; Mon, 20 Feb 2012 06:33:38
 -0800 (PST)
Date: Mon, 20 Feb 2012 06:33:38 -0800 (PST)
User-Agent: G2/1.0
X-HTTP-UserAgent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:10.0.2)
 Gecko/20100101 Firefox/10.0.2,gzip(gfe)
Message-ID: <379a55e1-a323-4112-83c1-50c13b9f78dd@i2g2000vbv.googlegroups.com>
Subject: Instead of iota, why not initialisation functions for constants?
From: Mark Taylor <mark....@sheffield.ac.uk>
To: golang-nuts <golan...@googlegroups.com>
Content-Type: text/plain; charset=ISO-8859-1

Hi,

when I used modula-2 many years ago, one of things that bugged me was 
that you couldn't easily create constant values or static vars pre- 
initialised with complex data.  to get round this I used to write a 
procedure to do this... the disadvantage of which was that the code 
persisted & wasted space in the finished program.

I always thought that prorgamming languages should have 
"initialisation functions" for doing this - such a function would be 
coded by the programmer in the program, then the compiler would be 
compile & execute the function at compilation time to do the 
initialisation work, then throw it away & not include it in the 
finished executable.

iota in go seems similar to this idea, but does anyone know whether 
"initialisation functions" as I've described were considered & if so, 
why they were rejected?    an initialisation function could do much 
more clever stuff than iota. 

I searched but could not find any posts related to this. 

thanks, 
Mark.



Input:

Hello all We have components with an IsAlive function that looks something like this: func (act *actor) IsAlive() bool {	act.mutex.Lock()	defer act.mutex.Unlock()	return act.alive}Other code does stuff like: go func() { for foo.IsAlive() { /* do stuff */ }; cleanup() }With the new fast path in Mutex's Lock and GOMAXPROCS=1, it can easily happen that if "do stuff" doesn't entail much code, that the goroutine sits in a loop and never gives other goroutines a chance to run again. The slow path that calls Semacquire eventually calls gosched, so this kind of loop wasn't a problem in the past. We can patch IsAlive with a defer runtime.Gosched() before locking the mutex to restore the slow path behaviour, but this doesn't seem ideal. What's the right way to do this? Regards Albert

Output:

["hello component isalive function look like func act actor isalive bool other code stuff like func with new fast path mutex 's lock gomaxprocs=[number] easily happen stuff not entail code goroutine sit loop give goroutine chance run the slow path call semacquire eventually call gosch kind loop not problem past patch isalive defer runtime gosch lock mutex restore slow path behaviour not ideal what be right way regards albert"]

Input:

I've been looking at go for the past week or two, and it lookspromising.  I plan to replace one of our high-volume services(currently in Java) with a go-based server to see how it handles theload.  One question I had was, which compiler is better for production- gccgo or 6g/6l?My other question was about searchability of Go in job postings.   Itried searching for job postings mentioning Go, and found(unsurprisingly) that searching for [Go] brings up lots of irrelevantjob postings.  See e.g. http://www.indeed.com/jobs?q=go  I alsosearched for [golang] and ["google go"], which didn't bring up anypostings (there simply may not be any, yet).  Has anyone thought aboutwhich term job postings should use so people searching for Go jobs canfind them?  "Golang" is unique enough, but "Go" probably isn't.  (Iwork at the job search engine indeed.com).   Thanks,-chris

Output:

['have look past week lookspromis   plan replace high volume services(currently java base server handle theload   one question compiler good production- gccgo [number]g/[number]l?my question searchability go job posting    itried search job posting mention go found(unsurprisingly search go bring lot irrelevantjob posting   see e.g.   alsosearch not bring anyposting simply   have think aboutwhich term job posting use people search go job canfind   golang unique go probably not   iwork job search engine    thank chris']

Input:

Hi,I created a short presentation using the present [1] package and I'dlike to archive it on a shared drive. Present only seems to providethe web server and I didn't see an obvious way to download anythingvia the web GUI. Did I miss something obvious and is there a way to generate a PDF artifact of the slides?Thanks,brian[1] - http://godoc.org/code.google.com/p/go.talks/present

Output:

["hi create short presentation present package i'dlike archive share drive present providethe web server not obvious way download anythingvia web gui do miss obvious way [filetype] artifact slides?thanks brian[[number]"]

Input:

Hi,when I used modula-2 many years ago, one of things that bugged me was that you couldn't easily create constant values or static vars pre- initialised with complex data.  to get round this I used to write a procedure to do this... the disadvantage of which was that the code persisted & wasted space in the finished program.I always thought that prorgamming languages should have "initialisation functions" for doing this - such a function would be coded by the programmer in the program, then the compiler would be compile & execute the function at compilation time to do the initialisation work, then throw it away & not include it in the finished executable.iota in go seems similar to this idea, but does anyone know whether "initialisation functions" as I've described were considered & if so, why they were rejected?    an initialisation function could do much more clever stuff than iota. I searched but could not find any posts related to this. thanks, Mark.

Output:

['hi modula-[number] year ago thing bug not easily create constant value static var pre- initialise complex datum   round write procedure disadvantage code persist waste space finished program think prorgamm language initialisation function function cod programmer program compiler compile execute function compilation time initialisation work throw away include finished executable.iota similar idea know initialisation function have describe consider reject     initialisation function clever stuff iota search find post relate mark']
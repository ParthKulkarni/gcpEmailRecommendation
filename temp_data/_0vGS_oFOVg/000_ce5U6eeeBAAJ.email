X-Received: by 10.176.83.84 with SMTP id y20mr1100178uay.81.1508938251833;
        Wed, 25 Oct 2017 06:30:51 -0700 (PDT)
X-BeenThere: golang-nuts@googlegroups.com
Received: by 10.159.56.51 with SMTP id p48ls794156uad.9.gmail; Wed, 25 Oct
 2017 06:30:09 -0700 (PDT)
X-Received: by 10.31.165.204 with SMTP id o195mr181751vke.4.1508938209478;
        Wed, 25 Oct 2017 06:30:09 -0700 (PDT)
Date: Wed, 25 Oct 2017 06:30:09 -0700 (PDT)
From: desaia...@gmail.com
To: golang-nuts <golan...@googlegroups.com>
Message-Id: <a9fded25-07da-4cc7-be91-518f0f360ec8@googlegroups.com>
Subject: Multiple Goroutine timeout
MIME-Version: 1.0
Content-Type: multipart/mixed; 
	boundary="----=_Part_17614_1553727779.1508938209304"

------=_Part_17614_1553727779.1508938209304
Content-Type: multipart/alternative; 
	boundary="----=_Part_17615_2050164682.1508938209305"

------=_Part_17615_2050164682.1508938209305
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 7bit

I am expecting to show url1 (2 sec ), url2 (4 sec ) but not url3( 6 sec) 
where timeout is 5 sec

but program showing only url1 value

Please help

https://play.golang.org/p/aMOoSEHjmZ

Thanks in advance

Rgds,

Abhi


package main

import "fmt"
import "time"

func InvokeUrl1(u string, val chan<- string) {
    time.Sleep(2 * time.Second)
    val <- "Url1 Value"
}
func InvokeUrl2(u string, val chan<- string) {
    time.Sleep(4 * time.Second)
    val <- "Url2 Value"
}
func InvokeUrl3(u string, val chan<- string) {
    time.Sleep(6 * time.Second)
    val <- "Url3 Value"
}

func GetUrlValues(urls []string) {

    ch := make(chan string, 1)
    for _, url := range urls {
        go func(u string) {
            val := make(chan string)
            if u == "url1" {
              go InvokeUrl1(u, val)
            } else if u == "url2" {
              go InvokeUrl2(u, val)
            } else if u == "url3" {
              go InvokeUrl3(u, val)
            }

            select {
            case ret := <-val:
                ch <- ret
            case <-time.After(5 * time.Second):
                ch <- "nil"
            }
        }(url)
    }
    fmt.Println(<-ch)
}
func main() {
  GetUrlValues([]string{"url1", "url2", "url3"})
}

------=_Part_17615_2050164682.1508938209305
Content-Type: text/html; charset=utf-8
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr">I am expecting to show url1 (2 sec ), url2 (4 sec ) but no=
t url3( 6 sec) where timeout is 5 sec<div><br></div><div>but program showin=
g only url1 value</div><div><br></div><div>Please help</div><div><br></div>=
<div>https://play.golang.org/p/aMOoSEHjmZ<br></div><div><br></div><div>Than=
ks in advance</div><div><br></div><div>Rgds,</div><div><br></div><div>Abhi<=
/div><div><br></div><div><br></div><div><div>package main</div><div><br></d=
iv><div>import &quot;fmt&quot;</div><div>import &quot;time&quot;</div><div>=
<br></div><div>func InvokeUrl1(u string, val chan&lt;- string) {</div><div>=
=C2=A0 =C2=A0 time.Sleep(2 * time.Second)</div><div>=C2=A0 =C2=A0 val &lt;-=
 &quot;Url1 Value&quot;</div><div>}</div><div>func InvokeUrl2(u string, val=
 chan&lt;- string) {</div><div>=C2=A0 =C2=A0 time.Sleep(4 * time.Second)</d=
iv><div>=C2=A0 =C2=A0 val &lt;- &quot;Url2 Value&quot;</div><div>}</div><di=
v>func InvokeUrl3(u string, val chan&lt;- string) {</div><div>=C2=A0 =C2=A0=
 time.Sleep(6 * time.Second)</div><div>=C2=A0 =C2=A0 val &lt;- &quot;Url3 V=
alue&quot;</div><div>}</div><div><br></div><div>func GetUrlValues(urls []st=
ring) {</div><div><br></div><div>=C2=A0 =C2=A0 ch :=3D make(chan string, 1)=
</div><div>=C2=A0 =C2=A0 for _, url :=3D range urls {</div><div>=C2=A0 =C2=
=A0 =C2=A0 =C2=A0 go func(u string) {</div><div>=C2=A0 =C2=A0 =C2=A0 =C2=A0=
 =C2=A0 =C2=A0 val :=3D make(chan string)</div><div>=C2=A0 =C2=A0 =C2=A0 =
=C2=A0 =C2=A0 =C2=A0 if u =3D=3D &quot;url1&quot; {</div><div>=C2=A0 =C2=A0=
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 go InvokeUrl1(u, val)</div><div>=C2=A0 =
=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 } else if u =3D=3D &quot;url2&quot; {</d=
iv><div>=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 go InvokeUrl2(u, v=
al)</div><div>=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 } else if u =3D=3D =
&quot;url3&quot; {</div><div>=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=
=A0 go InvokeUrl3(u, val)</div><div>=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=
=A0 }</div><div><br></div><div>=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 se=
lect {</div><div>=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 case ret :=3D &l=
t;-val:</div><div>=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 c=
h &lt;- ret</div><div>=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 case &lt;-t=
ime.After(5 * time.Second):</div><div>=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =
=C2=A0 =C2=A0 =C2=A0 ch &lt;- &quot;nil&quot;</div><div>=C2=A0 =C2=A0 =C2=
=A0 =C2=A0 =C2=A0 =C2=A0 }</div><div>=C2=A0 =C2=A0 =C2=A0 =C2=A0 }(url)</di=
v><div>=C2=A0 =C2=A0 }</div><div>=C2=A0 =C2=A0 fmt.Println(&lt;-ch)</div><d=
iv>}</div><div>func main() {</div><div>=C2=A0 GetUrlValues([]string{&quot;u=
rl1&quot;, &quot;url2&quot;, &quot;url3&quot;})</div><div>}</div></div></di=
v>
------=_Part_17615_2050164682.1508938209305--

------=_Part_17614_1553727779.1508938209304--

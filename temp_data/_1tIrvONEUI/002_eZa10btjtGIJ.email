X-Received: by 10.236.29.133 with SMTP id i5mr23959295yha.3.1424160262257;
        Tue, 17 Feb 2015 00:04:22 -0800 (PST)
X-BeenThere: golang-nuts@googlegroups.com
Received: by 10.107.129.83 with SMTP id c80ls1673343iod.44.gmail; Tue, 17 Feb
 2015 00:04:10 -0800 (PST)
X-Received: by 10.50.43.234 with SMTP id z10mr440600igl.8.1424160250031;
        Tue, 17 Feb 2015 00:04:10 -0800 (PST)
Date: Tue, 17 Feb 2015 00:04:09 -0800 (PST)
From: andrewc...@gmail.com
To: golang-nuts@googlegroups.com
Message-Id: <664af195-ae8b-4aad-9064-3c3460c0da99@googlegroups.com>
In-Reply-To: <ef4f3598-a82c-4acc-b2c7-416aef57ec3e@googlegroups.com>
References: <ef4f3598-a82c-4acc-b2c7-416aef57ec3e@googlegroups.com>
Subject: Re: GoLang on the Sony PlayStation Portable (PSP)
MIME-Version: 1.0
Content-Type: multipart/mixed; 
	boundary="----=_Part_349_278202427.1424160249245"

------=_Part_349_278202427.1424160249245
Content-Type: multipart/alternative; 
	boundary="----=_Part_350_676291070.1424160249245"

------=_Part_350_676291070.1424160249245
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 7bit

It also seems like the sdk does not provide a posix like environment, which 
probably means the go runtime won't compile, which would need to be ported 
(things like threading support etc).

On Tuesday, February 17, 2015 at 6:48:41 PM UTC+13, Kristopher Cost wrote:
>
> Out of curiousity and the desire to meld to of my favorite past-times, 
> what would be involved with getting GoLang code compiled for the Sony 
> PlayStation Portable (PSP)? 
>
>
> The device is dual core:
>
>
> PSP CPU Chip:
>
> Sony CXD2962GG CPU
>
> Based on MIPS R4000 32-bit Core
>
> MIPS32R2 'Allegrex' core (little endian)
>
>
> Media Engine Chip:
>
> Sony CXD1876 CPU
>
> Based on MIPS R4000 64-bit Core
>
> MIPS32R2 core (little endian)
>
>
> The base model has:
>
> Main Memory 32MB (DDR SDRAM) (64MB on later models)
>
> Flash Memory 32MB
>
> Embedded DRAM 4MB
>
>
> There exists an open-source C toolchain that supports all the custom 
> instructions:
>
>
> https://github.com/pspdev/pspsdk
>
>
> I read up on getting MIPS cross compilation running:
>
> https://github.com/golang/go/wiki/GccgoCrossCompilation
>
>
> Would it be simular to that?
>
>
> Any help with this odd mind exercise would be appreciated!
>

------=_Part_350_676291070.1424160249245
Content-Type: text/html; charset=utf-8
Content-Transfer-Encoding: 7bit

<div dir="ltr">It also seems like the sdk does not provide a posix like environment, which probably means the go runtime won't compile, which would need to be ported (things like threading support etc).<br><br>On Tuesday, February 17, 2015 at 6:48:41 PM UTC+13, Kristopher Cost wrote:<blockquote class="gmail_quote" style="margin: 0;margin-left: 0.8ex;border-left: 1px #ccc solid;padding-left: 1ex;"><div dir="ltr"><p style="margin-bottom:0px">Out of curiousity and the desire to meld to of my favorite past-times, what would be involved with getting GoLang code compiled for the Sony PlayStation Portable (PSP)? </p>
<p style="margin-bottom:0px"><br></p>
<p style="margin-bottom:0px">The device is dual core:</p>
<p style="margin-bottom:0px"><br></p>
<p style="margin-bottom:0px">PSP CPU Chip:</p>
<p style="margin-bottom:0px">Sony CXD2962GG CPU</p>
<p style="margin-bottom:0px">Based on MIPS R4000 32-bit Core</p>
<p style="margin-bottom:0px">MIPS32R2 'Allegrex' core (little endian)</p>
<p style="margin-bottom:0px"><br></p>
<p style="margin-bottom:0px">Media Engine Chip:</p>
<p style="margin-bottom:0px">Sony CXD1876 CPU</p>
<p style="margin-bottom:0px">Based on MIPS R4000 64-bit Core</p>
<p style="margin-bottom:0px">MIPS32R2 core (little endian)</p>
<p style="margin-bottom:0px"><br></p>
<p style="margin-bottom:0px">The base model has:</p>
<p style="margin-bottom:0px">Main Memory 32MB (DDR SDRAM) (64MB on later models)</p>
<p style="margin-bottom:0px">Flash Memory 32MB</p>
<p style="margin-bottom:0px">Embedded DRAM 4MB</p>
<p style="margin-bottom:0px"><br></p>
<p style="margin-bottom:0px">There exists an open-source C toolchain that supports all the custom instructions:</p>
<p style="margin-bottom:0px"><br></p>
<p style="margin-bottom:0px"><a href="https://github.com/pspdev/pspsdk" target="_blank" rel="nofollow" onmousedown="this.href='https://www.google.com/url?q\75https%3A%2F%2Fgithub.com%2Fpspdev%2Fpspsdk\46sa\75D\46sntz\0751\46usg\75AFQjCNEZuiGg00y5So-vu5uzahWflW7quQ';return true;" onclick="this.href='https://www.google.com/url?q\75https%3A%2F%2Fgithub.com%2Fpspdev%2Fpspsdk\46sa\75D\46sntz\0751\46usg\75AFQjCNEZuiGg00y5So-vu5uzahWflW7quQ';return true;">https://github.com/pspdev/<wbr>pspsdk</a></p>
<p style="margin-bottom:0px"><br></p>
<p style="margin-bottom:0px">I read up on getting MIPS cross compilation running:</p>
<p style="margin-bottom:0px"><a href="https://github.com/golang/go/wiki/GccgoCrossCompilation" target="_blank" rel="nofollow" onmousedown="this.href='https://www.google.com/url?q\75https%3A%2F%2Fgithub.com%2Fgolang%2Fgo%2Fwiki%2FGccgoCrossCompilation\46sa\75D\46sntz\0751\46usg\75AFQjCNGZtURZ8Scf8p_bUSkBarrvAgt_zw';return true;" onclick="this.href='https://www.google.com/url?q\75https%3A%2F%2Fgithub.com%2Fgolang%2Fgo%2Fwiki%2FGccgoCrossCompilation\46sa\75D\46sntz\0751\46usg\75AFQjCNGZtURZ8Scf8p_bUSkBarrvAgt_zw';return true;">https://github.com/golang/go/<wbr>wiki/GccgoCrossCompilation</a></p>
<p style="margin-bottom:0px"><br></p>
<p style="margin-bottom:0px">Would it be simular to that?</p>
<p style="margin-bottom:0px"><br></p>
<p style="margin-bottom:0px">Any help with this odd mind exercise would be appreciated!</p></div></blockquote></div>
------=_Part_350_676291070.1424160249245--

------=_Part_349_278202427.1424160249245--

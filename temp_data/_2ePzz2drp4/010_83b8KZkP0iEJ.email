X-Received: by 10.182.184.8 with SMTP id eq8mr3741961obc.16.1362303615231;
        Sun, 03 Mar 2013 01:40:15 -0800 (PST)
X-BeenThere: golang-nuts@googlegroups.com
Received: by 10.182.132.110 with SMTP id ot14ls1010671obb.18.gmail; Sun, 03
 Mar 2013 01:40:07 -0800 (PST)
X-Received: by 10.43.118.129 with SMTP id fq1mr13059614icc.9.1362303607887;
        Sun, 03 Mar 2013 01:40:07 -0800 (PST)
X-Received: by 10.43.118.129 with SMTP id fq1mr13059612icc.9.1362303607873;
        Sun, 03 Mar 2013 01:40:07 -0800 (PST)
Return-Path: <devon...@gmail.com>
Received: from mail-oa0-f42.google.com (mail-oa0-f42.google.com [209.85.219.42])
        by gmr-mx.google.com with ESMTPS id ex5si509899igc.1.2013.03.03.01.40.07
        (version=TLSv1 cipher=ECDHE-RSA-RC4-SHA bits=128/128);
        Sun, 03 Mar 2013 01:40:07 -0800 (PST)
Received-SPF: pass (google.com: domain of devon...@gmail.com designates 209.85.219.42 as permitted sender) client-ip=209.85.219.42;
Authentication-Results: gmr-mx.google.com;
       spf=pass (google.com: domain of devon...@gmail.com designates 209.85.219.42 as permitted sender) smtp.mail=devon...@gmail.com;
       dkim=pass head...@gmail.com
Received: by mail-oa0-f42.google.com with SMTP id i18so7929197oag.29
        for <golan...@googlegroups.com>; Sun, 03 Mar 2013 01:40:07 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:x-received:in-reply-to:references:date:message-id
         :subject:from:to:content-type;
        bh=EI2eibxYK+amGhrkgoGVM0rpx0NkrATofjPzOvEIU30=;
        b=ngV+sFsb79VLsOZj6Xajp9BIku+KwS4Lr5D0+PH5VtOwccbJCP4KI7MMaEqrTuuNTK
         o18fQqmTzlEvc0dCoPXS4J9ha6Yyvsgr6DBojCUCgZZ9I6gpLWJw1Pk3cmF3dllYK6og
         59XPvaNOciz9uk6Iy+dlbHBa5FzGZqh7lBp1F7WtlaINOHG6BlubPV4/aAcM5ynqmxo9
         QSZvi59YK0m1SWzuyrTNk9x1c1PwBAOGdAFCN0P0cD79K7e3cfieyOSlrtlTwcp+F2mk
         D1fI+/0FCXf2lVDD4sKwnsdv7k3/ah1vZ/9U2J8+48maMBE5cYkvbJRJ7AcUHsDSYz7r
         2WHg==
MIME-Version: 1.0
X-Received: by 10.60.13.1 with SMTP id d1mr13288682oec.55.1362303607599; Sun,
 03 Mar 2013 01:40:07 -0800 (PST)
Received: by 10.60.103.73 with HTTP; Sun, 3 Mar 2013 01:40:07 -0800 (PST)
In-Reply-To: <CAFgOgC_eny65=YePwYxcDsbP3pjM-i+3g2gFNywaCQrbb0hK-Q@mail.gmail.com>
References: <CAFgOgC9nkqCw9T3=owrYDfk6dNpBOkC0Z3K2r84upeCSCpaukw@mail.gmail.com>
	<CACT4Y+ZDKzCE7eyhFn=fWZpG0ZLdp_2tsr3XO_MZXMwXFPrYuQ@mail.gmail.com>
	<CAFgOgC-LCkzdiSZ-PSEid492-ME_7MSzV4oDH0kuM3AKikrKrg@mail.gmail.com>
	<CAFgOgC_6fP+NEZaArSbG_15vxizEubNMqoB41kaERF1QT3h4wg@mail.gmail.com>
	<CACT4Y+ZUEqTp2yuH4nG-2s36xm0qeCRDK6B3ExWyvYt5zoVH9A@mail.gmail.com>
	<CAFgOgC8N+e5M8aPmt+vrvo90asKpA9P_G+YSnsF56Yq+AaWLuQ@mail.gmail.com>
	<CACT4Y+bO2q3UQ1yNU2og0Bj=LTNxU1_Z4KDFogAGdG-Ct0p1mw@mail.gmail.com>
	<CACT4Y+ZfjTiEx+gVDKf1BHeRKn2US+=xA1XPaA9H6r-Z5qyiPQ@mail.gmail.com>
	<CAFgOgC_eny65=YePwYxcDsbP3pjM-i+3g2gFNywaCQrbb0hK-Q@mail.gmail.com>
Date: Sun, 3 Mar 2013 04:40:07 -0500
Message-ID: <CAFgOgC8joq2QqW1Z517nqU7-1cMPuUefPadLyEh1_MaZBSYuVQ@mail.gmail.com>
Subject: Fwd: [go-nuts] Workload semantics of new scheduler queues
From: "Devon H. O'Dell" <devon...@gmail.com>
To: golang-nuts <golan...@googlegroups.com>
Content-Type: text/plain; charset=UTF-8

... am terrible at reply-all.


---------- Forwarded message ----------
From: Devon H. O'Dell <devon...@gmail.com>
Date: 2013/3/3
Subject: Re: [go-nuts] Workload semantics of new scheduler queues
To: Dmitry Vyukov <dvy...@google.com>


On Mar 3, 2013 2:28 AM, "Dmitry Vyukov" <dvy...@google.com> wrote:
>
> On Sun, Mar 3, 2013 at 9:06 AM, Dmitry Vyukov <dvy...@google.com> wrote:
> > On Sun, Mar 3, 2013 at 8:56 AM, Devon H. O'Dell <devon...@gmail.com> wrote:
> >> 2013/3/3 Dmitry Vyukov <dvy...@google.com>:
> >>> On Sun, Mar 3, 2013 at 8:51 AM, Devon H. O'Dell <devon...@gmail.com> wrote:
> >>>> Forgot to CC list
> >>>>
> >>>>
> >>>> ---------- Forwarded message ----------
> >>>> From: Devon H. O'Dell <devon...@gmail.com>
> >>>> Date: 2013/3/3
> >>>> Subject: Re: [go-nuts] Workload semantics of new scheduler queues
> >>>> To: Dmitry Vyukov <dvy...@google.com>
> >>>>
> >>>>
> >>>> More in a bit, but...
> >>>>
> >>>>>> Since Pn can steal work from Pm, the semantics of access require
> >>>>>> assuming multiple consumers. But I can't tell if I'm right about
> >>>>>> understanding the producer workload. If I'm wrong, it needs to be
> >>>>>> MPMC, which reduces the producer side wait-freedom guarantee to simply
> >>>>>> lock-free, but I guess that's fine. For now I just want to see how it
> >>>>>> compares, especially on highly contended workloads. Getting this
> >>>>>> working on ARM will require adding the DMB instruction (possibly DSB,
> >>>>>> too) to the assembler.
> >>>>>
> >>>>> There are some portable atomic operations available in runtime, see
> >>>>> runtime.atomicload/store/xchg/cas/xadd.
> >>>>
> >>>> I'm worried about this. ARM has relaxed memory ordering, and the
> >>>> compilers don't generate memory fences on ARM, which means that
> >>>> lock-free data structures will probably break in weird ways if they're
> >>>> implemented on ARM. If these are working, it might be by accident...
> >>>> :S
> >>>
> >>>
> >>> Current atomic operations provide sequential consistency, that is,
> >>> they include all possible memory barriers.
> >>
> >> I haven't looked at the generated ASM output, but really? I don't see
> >> DSB/DMB support in 5a. But I haven't looked in compiled binaries for
> >> ARM yet. Just want to make sure, because "just using an atomic" isn't
> >> enough for ARM since it can reorder loads and stores with each other,
> >> irrespective of whether or not they deal with the same address.
> >
> > It's a good question. Now that I am actually looking at the code, I
> > think the arm atomics indeed lack proper memory barriers. And it can
> > be the reason why my scheduler patch initially deadlocked on arm, and
> > why adding atomicload/store instead of plain loads and stored fixed it
> > (atomicload/store implemented as ldrex/strex loop).
>
> The linux version uses kernel-provided CAS implementation that must
> include memory barriers (presumably).


Ah. That probably explains it. We can implement it natively. I will
try to do this (I'm also working on getting Concurrency Kit[1] working
on ARM) as part of a CL. Maybe.

Given what I've seen from such heavyweight CLs as this, what should I
submit as a minimal set of changes? What I have now is relatively
minimal, but will still need some ARM ASM changes. I can make / test
ARM changes, but I want to be clear on what we're looking for.

Thanks for the input!

--dho

X-Received: by 10.182.49.39 with SMTP id r7mr3225434obn.45.1362244951077;
        Sat, 02 Mar 2013 09:22:31 -0800 (PST)
X-BeenThere: golang-nuts@googlegroups.com
Received: by 10.182.185.80 with SMTP id fa16ls757010obc.56.gmail; Sat, 02 Mar
 2013 09:22:21 -0800 (PST)
X-Received: by 10.182.39.2 with SMTP id l2mr3229314obk.34.1362244941759;
        Sat, 02 Mar 2013 09:22:21 -0800 (PST)
X-Received: by 10.182.39.2 with SMTP id l2mr3229313obk.34.1362244941749;
        Sat, 02 Mar 2013 09:22:21 -0800 (PST)
Return-Path: <devon...@gmail.com>
Received: from mail-oa0-f52.google.com (mail-oa0-f52.google.com [209.85.219.52])
        by gmr-mx.google.com with ESMTPS id m3si301272iga.2.2013.03.02.09.22.21
        (version=TLSv1 cipher=ECDHE-RSA-RC4-SHA bits=128/128);
        Sat, 02 Mar 2013 09:22:21 -0800 (PST)
Received-SPF: pass (google.com: domain of devon...@gmail.com designates 209.85.219.52 as permitted sender) client-ip=209.85.219.52;
Authentication-Results: gmr-mx.google.com;
       spf=pass (google.com: domain of devon...@gmail.com designates 209.85.219.52 as permitted sender) smtp.mail=devon...@gmail.com;
       dkim=pass head...@gmail.com
Received: by mail-oa0-f52.google.com with SMTP id k14so7139029oag.25
        for <golan...@googlegroups.com>; Sat, 02 Mar 2013 09:22:21 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:x-received:date:message-id:subject:from:to
         :content-type;
        bh=P7LSXyygtFNYSY4NCGnsRtc2xxbC0Exd+4lgekqpnlc=;
        b=tZ90KJSQOmWFAljJReouiHs34lasvqgzNR7AmmyqjPsZyt0CGYXahM1+0bp1w+tXEd
         DBiiHqZBs0tB75Jcc5H+C5DmxS9sMlvYVKtVjyG+p3MLkVUumxxBH/Szyn59TAqnqH7v
         8svIb95duCRR/3ZzdK/lj2xJkMn2ieWIzhjneLeSJnYcAAly5qf6pTxJjehmtrcHkYwq
         tCZLisAMB8eBEwbdOVw+3T8LtgeFdGTCRwdc4MPr1CRvnH1MDqFfxrXO12h+mXI9SAUz
         gJoEv92XUzO2L01ZlHQtzr/ynr+U4zoC4AXT9KvDeE1fwLyvTgxL3KFZMrYFsiJ+76Wk
         pFRA==
MIME-Version: 1.0
X-Received: by 10.182.40.71 with SMTP id v7mr11476381obk.85.1362244941476;
 Sat, 02 Mar 2013 09:22:21 -0800 (PST)
Received: by 10.60.103.73 with HTTP; Sat, 2 Mar 2013 09:22:21 -0800 (PST)
Date: Sat, 2 Mar 2013 12:22:21 -0500
Message-ID: <CAFgOgC9nkqCw9T3=owrYDfk6dNpBOkC0Z3K2r84upeCSCpaukw@mail.gmail.com>
Subject: Workload semantics of new scheduler queues
From: "Devon H. O'Dell" <devon...@gmail.com>
To: golang-nuts <golan...@googlegroups.com>
Content-Type: text/plain; charset=UTF-8

I was going through the scheduler changes to try to understand them
better. I came across a couple of comments from Dmitry hinting at the
idea of experimenting with lock-free queues in the scheduler, and I
figured it might be fun to try. But I wanted to clarify my
understanding of the access semantics of the run queues first.

Basically, it seems there are 1+N queues. There is a single global
queue, and then GOMAXPROCS additional local queues, associated with a
"P." The access semantics around the global queue require the
scheduler lock to be held. I haven't changed this assumption, so I'm
rolling with it for now.

What I have done is made each P have a fixed-size ring buffer. If the
ring can't be inserted into (i.e. it is full), we insert the G into
the global run queue. If we can't fetch from the ring, we pull from
the ring of some other P. I haven't implemented "stealing" yet --
right now, I'll just pull a single G from someone else's ring -- but I
don't imagine it would be very difficult to implement a lock-free
version of that. I imagine we could just save the head pointer,
advance it towards the tail, and then copy from old->new-1.

From what I can tell, the workload is SPMC; there is only one thread
associated with contributing G's to a P's queue.

Since Pn can steal work from Pm, the semantics of access require
assuming multiple consumers. But I can't tell if I'm right about
understanding the producer workload. If I'm wrong, it needs to be
MPMC, which reduces the producer side wait-freedom guarantee to simply
lock-free, but I guess that's fine. For now I just want to see how it
compares, especially on highly contended workloads. Getting this
working on ARM will require adding the DMB instruction (possibly DSB,
too) to the assembler.

I'd appreciate any information on these points and thoughts on this
general approach. I've got most of the code written (there's some
stupid bug in there somewhere, but it "works" anyway), so I don't
think that finishing it would take too much longer.

--dho

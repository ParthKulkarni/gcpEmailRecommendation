X-Received: by 10.182.231.102 with SMTP id tf6mr3220753obc.38.1362250508934;
        Sat, 02 Mar 2013 10:55:08 -0800 (PST)
X-BeenThere: golang-nuts@googlegroups.com
Received: by 10.182.117.6 with SMTP id ka6ls799104obb.89.gmail; Sat, 02 Mar
 2013 10:54:59 -0800 (PST)
X-Received: by 10.42.115.1 with SMTP id i1mr11556096icq.2.1362250499718;
        Sat, 02 Mar 2013 10:54:59 -0800 (PST)
X-Received: by 10.42.115.1 with SMTP id i1mr11556095icq.2.1362250499704;
        Sat, 02 Mar 2013 10:54:59 -0800 (PST)
Return-Path: <devon...@gmail.com>
Received: from mail-ob0-x234.google.com (mail-ob0-x234.google.com [2607:f8b0:4003:c01::234])
        by gmr-mx.google.com with ESMTPS id r9si375185igl.1.2013.03.02.10.54.59
        (version=TLSv1 cipher=ECDHE-RSA-RC4-SHA bits=128/128);
        Sat, 02 Mar 2013 10:54:59 -0800 (PST)
Received-SPF: pass (google.com: domain of devon...@gmail.com designates 2607:f8b0:4003:c01::234 as permitted sender) client-ip=2607:f8b0:4003:c01::234;
Authentication-Results: gmr-mx.google.com;
       spf=pass (google.com: domain of devon...@gmail.com designates 2607:f8b0:4003:c01::234 as permitted sender) smtp.mail=devon...@gmail.com;
       dkim=pass head...@gmail.com
Received: by mail-ob0-x234.google.com with SMTP id ef5so1191008obb.25
        for <golan...@googlegroups.com>; Sat, 02 Mar 2013 10:54:59 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:x-received:in-reply-to:references:date:message-id
         :subject:from:to:content-type;
        bh=PqXDQ+ZVz/W89JR0ZGm1nxNMJiHWMvq5tYmW+TX6gGo=;
        b=DEJExzJPLoJHJ4Oji0AQT1cvLxRXjN5q6uITXiormGRFL4wvFB1lR3b2onGGt5rsqQ
         BijTXrsxTebecRM7nYLkzmEtiOw3hCHETifCne8ZZjYxIlE9TDXrqgguaLWTbvO5rkte
         TrZ8ZZSp9tFVsLRoB7r7v/46hIALltKI7FIzcyKy99FerEu2BUAF9ZqVdgejhCRrZ2cm
         vJ5DyYp9toEJjyG9T4SoFVBcHHSMUUT1ez09ZNz++bIiNtO54X9LrWESvO0Zy8qeUb74
         D4fW211u7GpxNGLtAmMJhPZ6YOLo4n9ct7Yu4DUCB4IOixdACEQQ+ulHZOCfuw6+R7NV
         Jc4g==
MIME-Version: 1.0
X-Received: by 10.60.172.108 with SMTP id bb12mr12298952oec.110.1362250499550;
 Sat, 02 Mar 2013 10:54:59 -0800 (PST)
Received: by 10.60.103.73 with HTTP; Sat, 2 Mar 2013 10:54:59 -0800 (PST)
In-Reply-To: <CAFgOgC9nkqCw9T3=owrYDfk6dNpBOkC0Z3K2r84upeCSCpaukw@mail.gmail.com>
References: <CAFgOgC9nkqCw9T3=owrYDfk6dNpBOkC0Z3K2r84upeCSCpaukw@mail.gmail.com>
Date: Sat, 2 Mar 2013 13:54:59 -0500
Message-ID: <CAFgOgC88g0tf+TNj9W=-v7H=sKQeA1x-rnrinPuPdi+yA1=itQ@mail.gmail.com>
Subject: Re: Workload semantics of new scheduler queues
From: "Devon H. O'Dell" <devon...@gmail.com>
To: golang-nuts <golan...@googlegroups.com>
Content-Type: text/plain; charset=UTF-8

I think it's a net win. This is just the threadring benchmark, but on
my Macbook Pro with 4 core 2.9GHz i7:

Current:
Devons-MacBook-Pro:shootout dho$ for i in 1 2 4; do time ./6.out
-n=20000000; done > /dev/null
real	0m3.025s user	0m3.018s sys	0m0.006s
real	0m3.057s user	0m3.050s sys	0m0.006s
real	0m3.036s user	0m3.031s sys	0m0.005s

New:
Devons-MacBook-Pro:shootout dho$ for i in 1 2 4; do time ./6.out
-n=20000000; done > /dev/null
real	0m2.633s user	0m2.627s sys	0m0.005s
real	0m2.623s user	0m2.618s sys	0m0.005s
real	0m2.645s user	0m2.639s sys	0m0.005s

The pkg tests I ran don't show really great improvements but there are
some, especially when there's higher contention over the P locks
(which is usually true when GOMAXPROCS=1). I suspect I can make some
additional improvements. Are there suggestions on which benchmarks I
should run for this sort of thing?

I'm not sure that the improvements would warrant trying to get this in
to 1.1, depending on how close we are to that.

--dho

2013/3/2 Devon H. O'Dell <devon...@gmail.com>:
> I was going through the scheduler changes to try to understand them
> better. I came across a couple of comments from Dmitry hinting at the
> idea of experimenting with lock-free queues in the scheduler, and I
> figured it might be fun to try. But I wanted to clarify my
> understanding of the access semantics of the run queues first.
>
> Basically, it seems there are 1+N queues. There is a single global
> queue, and then GOMAXPROCS additional local queues, associated with a
> "P." The access semantics around the global queue require the
> scheduler lock to be held. I haven't changed this assumption, so I'm
> rolling with it for now.
>
> What I have done is made each P have a fixed-size ring buffer. If the
> ring can't be inserted into (i.e. it is full), we insert the G into
> the global run queue. If we can't fetch from the ring, we pull from
> the ring of some other P. I haven't implemented "stealing" yet --
> right now, I'll just pull a single G from someone else's ring -- but I
> don't imagine it would be very difficult to implement a lock-free
> version of that. I imagine we could just save the head pointer,
> advance it towards the tail, and then copy from old->new-1.
>
> From what I can tell, the workload is SPMC; there is only one thread
> associated with contributing G's to a P's queue.
>
> Since Pn can steal work from Pm, the semantics of access require
> assuming multiple consumers. But I can't tell if I'm right about
> understanding the producer workload. If I'm wrong, it needs to be
> MPMC, which reduces the producer side wait-freedom guarantee to simply
> lock-free, but I guess that's fine. For now I just want to see how it
> compares, especially on highly contended workloads. Getting this
> working on ARM will require adding the DMB instruction (possibly DSB,
> too) to the assembler.
>
> I'd appreciate any information on these points and thoughts on this
> general approach. I've got most of the code written (there's some
> stupid bug in there somewhere, but it "works" anyway), so I don't
> think that finishing it would take too much longer.
>
> --dho

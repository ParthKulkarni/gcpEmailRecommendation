X-Received: by 10.180.98.103 with SMTP id eh7mr825169wib.3.1362293658372;
        Sat, 02 Mar 2013 22:54:18 -0800 (PST)
X-BeenThere: golang-nuts@googlegroups.com
Received: by 10.181.13.74 with SMTP id ew10ls231515wid.52.gmail; Sat, 02 Mar
 2013 22:54:09 -0800 (PST)
X-Received: by 10.204.9.140 with SMTP id l12mr628483bkl.7.1362293649596;
        Sat, 02 Mar 2013 22:54:09 -0800 (PST)
X-Received: by 10.204.9.140 with SMTP id l12mr628482bkl.7.1362293649577;
        Sat, 02 Mar 2013 22:54:09 -0800 (PST)
Return-Path: <dvy...@google.com>
Received: from mail-lb0-f177.google.com (mail-lb0-f177.google.com [209.85.217.177])
        by gmr-mx.google.com with ESMTPS id u1si1200340bkv.1.2013.03.02.22.54.09
        (version=TLSv1 cipher=ECDHE-RSA-RC4-SHA bits=128/128);
        Sat, 02 Mar 2013 22:54:09 -0800 (PST)
Received-SPF: pass (google.com: domain of dvy...@google.com designates 209.85.217.177 as permitted sender) client-ip=209.85.217.177;
Authentication-Results: gmr-mx.google.com;
       spf=pass (google.com: domain of dvy...@google.com designates 209.85.217.177 as permitted sender) smtp.mail=dvy...@google.com;
       dkim=pass head...@google.com
Received: by mail-lb0-f177.google.com with SMTP id go11so3142457lbb.22
        for <golan...@googlegroups.com>; Sat, 02 Mar 2013 22:54:09 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=google.com; s=20120113;
        h=mime-version:x-received:in-reply-to:references:date:message-id
         :subject:from:to:cc:content-type;
        bh=8pjNubSJDwk9WbM2S0jlBcE9MV6o8fZUWj9sUfxwRTM=;
        b=CQJMjvziOn3z3yqZczJwOQVe140Drp+C9MC4/lTBlDUO8zEvnOqS+vPftI/EuR8avO
         bUmrVaQx6rC3PoJIqfP3t04VCD8rhFGcMmaS+dDMPpw/tQvrb6BNK77LR2ihnzlTBU9b
         Vx1vF9sQIOpX1AuZ3VjYUZ9wUClwIhWPvoQTtaQPokKNbMBAyBQd9ureosXlg1o3oIvA
         CNfgwyDd1++Y12/cbINuzQkT8qTwkspxeKdRcnjDJDT8pkguAyep9NDARdYXe3Su7YCx
         UW5Kj6Yccr+LPaMXB5Zf5wPwM7UOi+dF9P2vd88Nys0zeWPYQVQ6uIvKSFiJHNpwzPMs
         +KRA==
MIME-Version: 1.0
X-Received: by 10.112.17.137 with SMTP id o9mr2893282lbd.42.1362293649106;
 Sat, 02 Mar 2013 22:54:09 -0800 (PST)
Received: by 10.114.11.36 with HTTP; Sat, 2 Mar 2013 22:54:09 -0800 (PST)
In-Reply-To: <CAFgOgC_6fP+NEZaArSbG_15vxizEubNMqoB41kaERF1QT3h4wg@mail.gmail.com>
References: <CAFgOgC9nkqCw9T3=owrYDfk6dNpBOkC0Z3K2r84upeCSCpaukw@mail.gmail.com>
	<CACT4Y+ZDKzCE7eyhFn=fWZpG0ZLdp_2tsr3XO_MZXMwXFPrYuQ@mail.gmail.com>
	<CAFgOgC-LCkzdiSZ-PSEid492-ME_7MSzV4oDH0kuM3AKikrKrg@mail.gmail.com>
	<CAFgOgC_6fP+NEZaArSbG_15vxizEubNMqoB41kaERF1QT3h4wg@mail.gmail.com>
Date: Sun, 3 Mar 2013 08:54:09 +0200
Message-ID: <CACT4Y+ZUEqTp2yuH4nG-2s36xm0qeCRDK6B3ExWyvYt5zoVH9A@mail.gmail.com>
Subject: Re: [go-nuts] Workload semantics of new scheduler queues
From: Dmitry Vyukov <dvy...@google.com>
To: "Devon H. O'Dell" <devon...@gmail.com>
Cc: golang-nuts <golan...@googlegroups.com>
Content-Type: text/plain; charset=ISO-8859-1
X-Gm-Message-State: ALoCoQmMlx3SN7MRYMyWu/PYb1Cc3n4lm/SNDTj/C10LJVRhMnBS///PwFngj9aJ/oNrOzK4oH/3w/PxyFkIMFa46EaLLzE/3DXn8VH7sjz2s0zoFBE2PoPf/FuiKqL4s0wHAWJV+L7PTtrzqfYIMQ94TSKReQTQIaiSsYrwpUFF/FuLX0Jm14IyttpuimLtD8g+V+NdPgQiIPtj3lLmpJRLKbFx9qlPcQ==

On Sun, Mar 3, 2013 at 8:51 AM, Devon H. O'Dell <devon...@gmail.com> wrote:
> Forgot to CC list
>
>
> ---------- Forwarded message ----------
> From: Devon H. O'Dell <devon...@gmail.com>
> Date: 2013/3/3
> Subject: Re: [go-nuts] Workload semantics of new scheduler queues
> To: Dmitry Vyukov <dvy...@google.com>
>
>
> More in a bit, but...
>
>>> Since Pn can steal work from Pm, the semantics of access require
>>> assuming multiple consumers. But I can't tell if I'm right about
>>> understanding the producer workload. If I'm wrong, it needs to be
>>> MPMC, which reduces the producer side wait-freedom guarantee to simply
>>> lock-free, but I guess that's fine. For now I just want to see how it
>>> compares, especially on highly contended workloads. Getting this
>>> working on ARM will require adding the DMB instruction (possibly DSB,
>>> too) to the assembler.
>>
>> There are some portable atomic operations available in runtime, see
>> runtime.atomicload/store/xchg/cas/xadd.
>
> I'm worried about this. ARM has relaxed memory ordering, and the
> compilers don't generate memory fences on ARM, which means that
> lock-free data structures will probably break in weird ways if they're
> implemented on ARM. If these are working, it might be by accident...
> :S


Current atomic operations provide sequential consistency, that is,
they include all possible memory barriers.

To : shirish à¤¶à¤¿à¤°à¥€à¤· <shirishag75@gmail.com>
Subject : Re: Do I have to do anything to make sure ext4lazyinit works as being advertised ?
From : lsorense@csclub.uwaterloo.ca (Lennart Sorensen)
Date : Wed, 1 Feb 2017 10:30:52 -0500
Message-id : 20170201153052.GC17365@csclub.uwaterloo.ca
In-reply-to : <[ðŸ”Ž]Â CADdDZRk6_TccudrxVqkO=tDKBfNiXit7wnaVYm8vVLaCbFGUtg@mail.gmail.com>
References : <CADdDZRmHxC+cjoOZT5Pw78xcwtHuQpLLX6W3ON2xxfLQexuj_A@mail.gmail.com> <20170131195610.GA17365@csclub.uwaterloo.ca> <CADdDZRkc0F7OcCJfa==z=NAh8b2zeK8_PTZALq1suBo124RD9A@mail.gmail.com> <[ðŸ”Ž]Â CADdDZRk6_TccudrxVqkO=tDKBfNiXit7wnaVYm8vVLaCbFGUtg@mail.gmail.com>


On Wed, Feb 01, 2017 at 02:27:39PM +0530, shirish à¤¶à¤¿à¤°à¥€à¤· wrote:
> Basically the article's statement is wrong.
> There is no such thing as explicit itable initialization IO bandwidth
> restriction in MB/s. itable initialization rate is controlled by init_itable=N
> see: https://www.kernel.org/doc/Documentation/filesystems/ext4.txt
> """
> The lazy itable init code will wait n times the
> number of milliseconds it took to zero out the
> previous block group's inode table.  This
> minimizes the impact on the system performance
> while file system's inode table is being initialized.
> """
> By default init_itable=10, so it use 1/10th bandwidth of the disk.
> And if we back to original article this means author used generic
> HDD with 160Mb/s sequential write performance.
Oh OK, that sounds even better.
> My patch was fix for bug which was spotted on large disk arrays,
> 36 in my case. So itable initialization was active all the time
> while holding global lock.
> 
> From this, it seems there aren't any limits except for 10% of whatever
> the link between
Why would a large array make a difference to the algorithm if it aims
to use 1/10 of the bandwidth?
-- 
Len Sorensen
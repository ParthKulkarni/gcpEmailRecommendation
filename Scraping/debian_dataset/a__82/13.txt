To : debian-devel@lists.debian.org
Subject : Re: Converting to dgit
From : Russ Allbery <rra@debian.org>
Date : Tue, 03 Jan 2017 19:36:46 -0800
Message-id : 87k2ab4htd.fsf@hope.eyrie.org
In-reply-to : <[ðŸ”Ž]Â 87a8b7bkal.fsf@vostro.rath.org> (Nikolaus Rath's message of	"Tue, 03 Jan 2017 19:01:22 -0800")
References : <[ðŸ”Ž]Â 20170103194117.7bal6rcnv4v2yhus@iris.silentflame.com>	<[ðŸ”Ž]Â 87zij7hdek.fsf@hope.eyrie.org> <[ðŸ”Ž]Â 87a8b7bkal.fsf@vostro.rath.org>


Nikolaus Rath <Nikolaus@rath.org> writes:
> When talking about percentages, I think it's worth keeping in mind the
> 1000% longer that it takes to comprehend a diff of two patches-unapplied
> trees (as gbp produces them) over a diff of two patches-applied trees
> (as git-dpm and dgit with maint-merge workflow produce).
Sure, but I basically never do that, so I don't care?
The few times I do care, it's easy enough to generate the two
patches-applied trees and generate the clearer diff.
> I don't understand how gbp became so much more popular than git-dpm.
I use gbp pq because it's simple and I understand it.  It took me about
fifteen minutes to understand how it worked (given that I was already
using git-buildpackage).
Some of this is because I was already using git-buildpackage from way, way
before git-dpm existed, and I've been (minorly) involved in its
development, so I've had a long time to learn how it works overall.  So
adding gbp pq to my normal git-buildpackage workflow was easy.  If I were
starting from scratch and didn't know about either system, maybe git-dpm
would be as easy to learn as the full git-buildpackage setup.
That said, gbp pq does something else I really like, namely it exports in
the source package all of the metadata that anyone else would need to pick
up the package without needing a copy of my Git repository (except for
history).  I've used various schemes in the past where the source package
artifact smushes everything together and basically is no longer the
"preferred form of modification" that I'd want to have when making changes
to the source package, and I really don't like them.
That specifically means I want separated upstream patches in
debian/patches, which in turn means I may as well be using 3.0 (quilt).
(See my comment in the other thread about 3.0 (quilt) being an interchange
format between VCSs.)  If as you say above git-dpm produces a
patches-applied tree, I don't see how it could preserve that (very
important) property, although maybe I'm missing something?  I think the
rebased set of patches is far, far less useful if they exist only in my
Git repository and not in the Debian source package, but maybe git-dpm
puts them there as well in some way that I don't understand?
-- 
Russ Allbery (rra@debian.org)               <http://www.eyrie.org/~eagle/>
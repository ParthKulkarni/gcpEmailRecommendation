To : Ian Jackson <ijackson@chiark.greenend.org.uk>
Subject : Re: Summary of the 2038 BoF at DC17
From : Steve McIntyre <steve@einval.com>
Date : Mon, 18 Sep 2017 18:33:12 +0100
Message-id : 20170918173312.gc5j7ryhkh3zxn42@tack.einval.com
In-reply-to : <[ðŸ”Ž]Â 22975.63594.370909.535985@chiark.greenend.org.uk>
References : <[ðŸ”Ž]Â 20170901235854.ds4hffumd2ktggau@tack.einval.com> <[ðŸ”Ž]Â 10e4fa4a-433c-a43b-1136-984293497c50@p10link.net> <[ðŸ”Ž]Â E1dtwtV-0007o5-O1@mail.einval.com> <[ðŸ”Ž]Â 22975.63594.370909.535985@chiark.greenend.org.uk>


On Mon, Sep 18, 2017 at 05:46:34PM +0100, Ian Jackson wrote:
>Steve McIntyre writes ("Re: Summary of the 2038 BoF at DC17"):
>> It depends on how/where/why you're embedding 64-bit time,
>> basically. If you're embedding a time_t (or a struct including a
>> time_t) in your ABI and want to keep to something similar, it's worth
>> waiting to see what's going to be standardised then using that.
>
>Are you saying that if I am designing an API/ABI now I should write:
>
>  typedef struct {
>    blah blah;
>    time_t whenever;
>    blah blah;
>  } MyAPIThing;
>
>rather than
>
>  typedef struct {
>    blah blah;
>    uint64_t whenever;
>    blah blah;
>  } MyAPIThing;
>
>?  Really ?
>
>I think that's bad advice.
Yes, really. You've now hidden that you're storing time data by using
another data type, which makes things much harder to find if anybody
else is scanning for time-handling code. And you've made assumptions
about how new time-handling APIs are likely to look in the near-ish
future when people have worked everything out and agreed new
standards. If the new stuff ends up using a different representation
with 96 or even 128 bits in total, I'd argue that it's cleaner to wait
for that and not gamble.
>I would do the latter.  Even though that means writing library code
>internally that checks whether the supplied value of `whenever' fits
>in whatever the system calls a time_t.
Your code, your choice...
-- 
Steve McIntyre, Cambridge, UK.                                steve@einval.com
  Mature Sporty Personal
  More Innovation More Adult
  A Man in Dandism
  Powered Midship Specialty
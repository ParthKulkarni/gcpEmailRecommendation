To : debian-devel@lists.debian.org
Subject : Re: Concerns to software freedom when packaging deep-learning based appications.
From : Russ Allbery <rra@debian.org>
Date : Thu, 12 Jul 2018 19:30:07 -0700
Message-id : 87in5jkguo.fsf@hope.eyrie.org
In-reply-to : <[ðŸ”Ž]Â 1531446685.5001.1.camel@stuart.id.au> (Russell Stuart's message	of "Fri, 13 Jul 2018 11:51:25 +1000")
References : <[ðŸ”Ž]Â 20180712123524.GA25751@Asuna>	<[ðŸ”Ž]Â 23367.31559.332904.665828@chiark.greenend.org.uk>	<[ðŸ”Ž]Â 87sh4ov1zw.fsf@hope.eyrie.org>	<[ðŸ”Ž]Â 23367.35994.839460.485467@chiark.greenend.org.uk>	<[ðŸ”Ž]Â 1531446685.5001.1.camel@stuart.id.au>


Russell Stuart <russell-debian@stuart.id.au> writes:
> Apart from the "non-human" intelligence bit none of this is different to
> what we _already_ accept into Debian.  It's very unlikely I could have
> sensible contributions to the game engines of the best chess, backgammon
> or Go programs Debian has now.
For what it's worth, the backgammon engine in Debian now (GNU Backgammon,
which I package as gnubg) uses a trained neural network that was
constructed in much the way that you describe (training the network by
playing it against itself for substantial amounts of time).  It's been in
Debian for many years, long before I packaged it.
I think it's the preferred form of modification in this case because
upstream does not have, so far as I know, any special data set or
additional information or resources beyond what's included in the source
package.  They would make any changes exactly the same way any user of the
package would: instantiating the net and further training it, or starting
over and training a new network.
That may have been a better example to ask about than my scientific data
example.
(For those who are curious, this is the file gnubg.weights in the gnubg
source package.)
-- 
Russ Allbery (rra@debian.org)               <http://www.eyrie.org/~eagle/>
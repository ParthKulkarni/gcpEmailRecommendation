To : Steve McIntyre <steve@einval.com>
Subject : Re: Summary of the 2038 BoF at DC17
From : Ian Jackson <ijackson@chiark.greenend.org.uk>
Date : Mon, 18 Sep 2017 17:46:34 +0100
Message-id : 22975.63594.370909.535985@chiark.greenend.org.uk
In-reply-to : <[ðŸ”Ž]Â E1dtwtV-0007o5-O1@mail.einval.com>
References : <[ðŸ”Ž]Â 20170901235854.ds4hffumd2ktggau@tack.einval.com>	<[ðŸ”Ž]Â 10e4fa4a-433c-a43b-1136-984293497c50@p10link.net>	<[ðŸ”Ž]Â E1dtwtV-0007o5-O1@mail.einval.com>


Steve McIntyre writes ("Re: Summary of the 2038 BoF at DC17"):
> It depends on how/where/why you're embedding 64-bit time,
> basically. If you're embedding a time_t (or a struct including a
> time_t) in your ABI and want to keep to something similar, it's worth
> waiting to see what's going to be standardised then using that.
Are you saying that if I am designing an API/ABI now I should write:
  typedef struct {
    blah blah;
    time_t whenever;
    blah blah;
  } MyAPIThing;
rather than
  typedef struct {
    blah blah;
    uint64_t whenever;
    blah blah;
  } MyAPIThing;
?  Really ?
I think that's bad advice.
I would do the latter.  Even though that means writing library code
internally that checks whether the supplied value of `whenever' fits
in whatever the system calls a time_t.
Ian.
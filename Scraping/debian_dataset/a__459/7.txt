To : Philipp Kern <pkern@debian.org>
Subject : Re: Proposal: Repository for fast-paced package backports
From : Dominik George <natureshadow@debian.org>
Date : Wed, 26 Dec 2018 20:16:45 +0100
Message-id : 20181226191645.GV6770@portux.naturalnet.de
In-reply-to : <[ðŸ”Ž]Â 548fd34b-3320-cdba-4f3c-92a24bbb8043@philkern.de>
References : <[ðŸ”Ž]Â 20181225204607.GD32147@portux.naturalnet.de> <[ðŸ”Ž]Â ee6454f1-2173-179e-ee55-838e254491f5@philkern.de> <[ðŸ”Ž]Â 20181226183111.GY6770@portux.naturalnet.de> <[ðŸ”Ž]Â 548fd34b-3320-cdba-4f3c-92a24bbb8043@philkern.de>


> For backports the general supportability assumption is that you provide a
> sane upgrade path from stable to the backports and from the backport to the
> next stable (optimally the same package). Once you take the presence of the
> stable package out of the mix, it becomes weird. How long do you need to
> preserve compatibility code? How does an agile package that does not fit
> Debian's release cycle cater to these requirements?
This is wrong, at least in a big part. The stable release cycle does not
apply for -backports. A package in -backports can be udpated an
arbitrary number of times during the development window of stable+1,
leaving us with the exact same issue as you are describing for
-volatile.
If you take into account edge cases, where a package is removed from
testing during the freeze, is removed from -backports as a result, is
not released with stable+1, then gets fixed and reintroduced to testing
and -backports, it gets even closer. In short: This is a situation every
maintainer has to take measures for, be it in -backports or -volatile.
-nik
signature.asc
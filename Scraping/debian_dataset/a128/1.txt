To : debian-devel@lists.debian.org
Subject : Re: Packaging of libraries with unstable ABI (D, Rust, Go, ...)
From : Sean Whitton <spwhitton@spwhitton.name>
Date : Thu, 18 May 2017 18:52:51 +0100
Message-id : 20170518175251.c3m7jatwikcoa7xa@zephyr.silentflame.com
In-reply-to : <[ðŸ”Ž]Â CAKNHny_vTGsFNWJkmJdF-ypTDfmJhF1-OWeDHVSD-xOgv5tYuA@mail.gmail.com>
References : <[ðŸ”Ž]Â CAKNHny_vTGsFNWJkmJdF-ypTDfmJhF1-OWeDHVSD-xOgv5tYuA@mail.gmail.com>


Hello Matthias,
On Thu, May 18, 2017 at 04:37:58PM +0200, Matthias Klumpp wrote:
> Looking at what other languages with the same problem have done, there
> are basically two ways to deal with the issue:
> 
>  1) Rebuild every reverse-dependency of the languages' compiler every
> time the compiler is updated. This is done by Haskell and OCaml and
> resulted in permanent transition trackers for the libraries.
> 
>  2) Ship source code instead of libraries in packages, and compile it
> directly into the target binaries. That way, the maintenance overhead
> of the languages' packages is greatly reduced, but code is statically
> linked (boo!) and a lot of code needs to be rebuilt for every
> dependency (meaning more work for the autobuilders). This is done by
> Go, and apparently also the plan to do for Rust.
Note that Haskell is statically linked, too.  We rebuild every
reverse-dependency of every library that changes, not just the compiler.
Are you saying that with D, it's only changes to the compiler that are
problematic?
-- 
Sean Whitton
signature.asc
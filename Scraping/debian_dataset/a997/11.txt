To : Adam Borowski <kilobyte@angband.pl>, debian-devel@lists.debian.org
Subject : Re: Depends/Recommends from libraries
From : Thibaut Paumard <thibaut@debian.org>
Date : Thu, 9 Mar 2017 16:52:38 +0100
Message-id : f2adcdf1-9832-a9a2-f9f3-7736ab4adcdf@debian.org
In-reply-to : <[ðŸ”Ž]Â 20170308223353.foxl4gg5pl5ratoo@angband.pl>
References : <[ðŸ”Ž]Â 20170308223353.foxl4gg5pl5ratoo@angband.pl>


Le 08/03/2017 Ã  23:33, Adam Borowski a Ã©crit :
> Hi, mortals and paultag!
> 
> I'd like to discuss (and then propose to -policy) the following rule:
> 
> # Libraries which don't provide a convenient means of conditionally loading
> # at runtime (this includes most libraries for languages such as C), SHOULD
> # NOT declare a "Depends:" or "Recommends:" relationship, directly or
> # indirectly, on packages containing anything more than dormant files. 
> # Those include, among others, daemons, executables in $PATH, etc.  Any such
> # relationship should be instead declared by programs that use the library
> # in question -- it is up to them to decide how important the relationship
> # is.
Hi,
This doesn't seem to make sense to me. You list a number of examples
where the outcome of a dependency or recommendation chain is not
desirable. That means that those packages may be improved by breaking
this chain, which doesn't need to go through a policy amendment.
There are quite legitimate uses for dependencies or recommendations in
libraries. For instance, tne library that I maintain (libgyoto) has the
option to provide MPI paralellisation. This requires an external
executable, which is provided in a separate package. The external tool
is in a separate package because it can exist only for one architecture
at a time on the system (it lives in /usr/bin), while the library lives
in a multi-arch directory.
Kind regards, Thibaut.
To : debian-devel@lists.debian.org
Subject : Re: Use case for -dbg package
From : Colin Watson <cjwatson@debian.org>
Date : Wed, 31 Oct 2018 13:58:07 +0000
Message-id : 20181031135807.2p67q4b4aq3b7hva@riva.ucam.org
Mail-followup-to : debian-devel@lists.debian.org
In-reply-to : <[ðŸ”Ž]Â CAPQicOx54onwbNmGN6zJgr=8crAX=p7RoWMXPAHM8RZjkXWKNQ@mail.gmail.com>
References : <[ðŸ”Ž]Â CAPQicOx54onwbNmGN6zJgr=8crAX=p7RoWMXPAHM8RZjkXWKNQ@mail.gmail.com>


On Tue, Oct 30, 2018 at 06:01:38PM -0700, Joseph Herlant wrote:
> I was reviewing Tobias' updates on the use of dbg packages vs dbgsym
> in dev ref and was wondering if there was any other know use cases
> where we cannot use dbgsym over dbg packages for building debugging
> symbols.
> 
> As far as I remember the Python extensions where the ones that were
> not working well with dbgsym (I don't remember why), but I'm wondering
> if there are any other known cases where the dbgsym packages cannot be
> used.
grub2 ships *-dbg packages that contain unstripped GRUB images and
modules, as well as files needed to use GRUB's GDB stub (which can be
used to debug the running boot loader over a serial port).  As well as
needing somewhere for the GDB script files to go, the way that GRUB's
build process produces boot-time-usable images is sufficiently different
from userspace, and indeed platform-specific, that the normal *-dbgsym
process won't work.
I don't think specific exceptions like this need to be called out in the
developers' reference, as long as it remains clear that exceptions for
unusual cases are allowed.
-- 
Colin Watson                                       [cjwatson@debian.org]
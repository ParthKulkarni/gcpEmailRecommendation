To : debian-devel@lists.debian.org
Subject : Re: Repackaging upstream source with file modifications?
From : Colin Watson <cjwatson@debian.org>
Date : Mon, 12 Feb 2018 11:22:50 +0000
Message-id : 20180212112250.ufnr6cuudtozy2fx@riva.ucam.org
Mail-followup-to : debian-devel@lists.debian.org
In-reply-to : <[ðŸ”Ž]Â 20180212104216.GA29270@perpetual.pseudorandom.co.uk>
References : <[ðŸ”Ž]Â 20180212102833.avzibyusa25xl5o2@riva.ucam.org> <[ðŸ”Ž]Â 20180212104216.GA29270@perpetual.pseudorandom.co.uk>


On Mon, Feb 12, 2018 at 10:42:16AM +0000, Simon McVittie wrote:
> On Mon, 12 Feb 2018 at 10:28:33 +0000, Colin Watson wrote:
> > I also cannot simply remove the relevant file in this case (a CRC
> > implementation), as doing that would break too many existing parts
> > of GRUB.
> > 
> > Fortunately, libgcrypt upstream implemented unencumbered replacement
> > CRC code a while back, and over the weekend I worked on backporting
> > this to the version of libgcrypt imported into GRUB
> 
> I believe the canonical way to do this is to delete the problematic file
> from the orig tarball, and patch in the reimplementation as part of the
> Debian part of the source package. This will mean your orig tarball is
> incomplete/not compilable, but that isn't something Debian really aims
> to solve.
Huh.  I hadn't thought of that option, but it seems peculiar and
excessively baroque (it basically splits the patch into a remove and an
add, making it less obviously identical to the one submitted upstream
and harder to keep track of in git).  Is there a strong reason to take
that approach?
-- 
Colin Watson                                       [cjwatson@debian.org]
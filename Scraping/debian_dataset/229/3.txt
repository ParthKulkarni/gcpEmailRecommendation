To : debian-devel@lists.debian.org
Subject : Re: allowed uses of non-baseline CPU extensions
From : Simon McVittie <smcv@debian.org>
Date : Thu, 5 Oct 2017 20:50:00 +0100
Message-id : 20171005195000.snndww7zelea5kxx@perpetual.pseudorandom.co.uk
In-reply-to : <[ðŸ”Ž]Â 87bmllbh51.fsf@turtle.gmx.de>
References : <[ðŸ”Ž]Â 20171005015256.ff7gay2sniro7yhr@angband.pl> <[ðŸ”Ž]Â CAKTje6GW3jYvYV-7hRtukLyfjhz7Cc4qhjkexD9A7Xw84t6voA@mail.gmail.com> <[ðŸ”Ž]Â 20171005080924.crxo25dehp6lrxzb@perpetual.pseudorandom.co.uk> <[ðŸ”Ž]Â 87bmllbh51.fsf@turtle.gmx.de>


On Thu, 05 Oct 2017 at 20:10:02 +0200, Sven Joachim wrote:
> On 2017-10-05 09:09 +0100, Simon McVittie wrote:
> > It's also common
> > to identify architecture by uname -m in ad-hoc project-specific build
> > systems
> 
> Using uname -m seems to be wrong, since there are many 32-bit
> architectures where the kernel can be 64-bit.
I never said it was correct, only that it was common :-)
(It also breaks cross-builds, obviously.)
Making those ad-hoc build systems behave correctly usually requires
something like "make ARCH=i686" to override some variable (ARCH in that
example) from its default value of $(shell uname -m) to what we want.
The overriding value needs to be something that uname -m might have
returned on the hypothetical baseline machine that we're building
for - so something chosen from the same vocabulary as uname -m, even
though no actual uname(2) system call is involved.
    smcv
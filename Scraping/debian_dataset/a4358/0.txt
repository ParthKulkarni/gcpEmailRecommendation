To : fw@deneb.enyo.de
Subject : Re: Asciidoc transition to the python3 implementation or just EOL
From : Joseph Herlant <herlantj@gmail.com>
Date : Mon, 8 Oct 2018 15:57:50 -0700
Message-id : CAPQicOz8=-hVH3B=zt-wQ5KK=mgB+kr+jonWa3aB+jwMchdZSg@mail.gmail.com
In-reply-to : <[ðŸ”Ž]Â 87k1msxlmu.fsf@mid.deneb.enyo.de>
References : <[ðŸ”Ž]Â CAPQicOx26j3Mr65+KyrjSNamevzYdjKWporjfQx1XNvRf5Vtjg@mail.gmail.com> <[ðŸ”Ž]Â 87k1msxlmu.fsf@mid.deneb.enyo.de>


Hi guys,
Thanks for you answers.
On Mon, Oct 8, 2018 at 5:04 AM Ian Jackson
<ijackson@chiark.greenend.org.uk> wrote:
> Why would a user want the old python2 asciidoc ?  AFAICT from the
> outside of the program the implementation language is a hidden
> detail.
Haha! I've seen people strictly against the upgrade from python 2 to
python 3, so stuffs like that happen! :D
But I raised that issue because of the change of repo which clearly
separates the 2 implementations upstream, so wondering if anybody
would see it as a problem to change the source repo when upgrading.
> Do the two versions have different bugs so that you might want one lot
> of bugs (from the py2 version) for one use case and one lot of bugs
> (from the py3 version) for others ?
There are only a few commits on the py3 implementations compared to
the py2 and not a lot of suage as most people switch to asciidoctor
nowadays (one of the reason being that the language evolution now
relies on asciidoctor as reference, even stated in the asciidoc repo
description https://github.com/asciidoc/asciidoc).
> > 2. change the source of the asciidoc package to point to the
> > asciidoc-py3 repo (and create a new fake tag as upstream still didn't
> > cut a tag on it)
>
> This is probably fine.  Please tell me that upstream intend NOT to
> reuse version numbers from the py2 version.
Upstream brought in the tags of the py2 version when creating the py3
version so I'm guessing they do not want to reuse the version number
but they are not comfortable to cut a release yet (even if Fedora
already switched to the py3 version).
> > 3. have people just move to asciidoctor (it's way more actively
> > maintained and tested, plus, most package support both nowadays) and
> > just let the python implementation die naturally
>
> I know nothing about this.  What are the relative advantages and
> disadvantages of asciidoctor vs asciidoc ?  Do they process the same
> documents in exactly the same way ?
The result is about the same except the stylesheets differ a bit
(asciidoctor has more modern stylesheets). The man page output is
about the same.
One of the advantages of asciidoctor is not to rely on the latex suite
that makes the asciidoc installation and update so heavy.
> Stepping back: as maintainer I think you need to have an opinion about
> whether our users are best served by one of asciidoc (py3), asciidoc
> (py2), asciidoctor, or by some combination of alternatives.
Oh, my opinion is that people should really switch to asciidoctor and
let the python implementation die. The original design of the python
app would need a complete rewrite in my opinion to be clean and easily
maintainable.
But when starting to ask the different upstreams to also support
asciidoctor, some people were feeling very strongly against accepting
PR like that because "why changing something that nobody touched over
the last 10 years, it still works" !
So this email is also a curtesy totry and see if it's worth for me to
invest time testing and pushing PR to the python implementation or if
nobody cares and this way I push more stuffs out of asciidoc python.
> That is extra effort of course.  So if you don't have the effort for
> that then maybe you want to drop some of the variants, but in that
> case you should probably check around to see if anyone else wants to
> take on the work.
I'm fine making the effort, just trying to gauge where I should spend
the most time ;)
On Mon, Oct 8, 2018 at 12:51 PM Florian Weimer <fw@deneb.enyo.de> wrote:
> There is a second Python 3 port here:
>
>    <https://gitlab.com/asciidoc3/asciidoc3>
I am aware of that variant but I'm really reluctant packaging it. The
reason is that project started in complete violation of the GLP
licensing (they took the asciidoc code without the history, remove all
the credits to the original authors, changed the license, etc). They
did some corrections because some people got pretty angry about it but
there are apparently still some violations not fixed according to the
asciidoc upstream.
Plus it seems there's a bit of animosity with the person that make the
asciidoc language as a whole, so I'm afraid of the divergences it
would bring.
> I don't know which one is better, and if both support Unicode properly
> (the old asciidoc did not, but given the name, that can hardly be
> considered a bug, right?).
As far as I've seen, there's not a lot of differences between the 2
projects yet (in asciidoc3 they removed the integration tests and
added unit tests and renamed the binaries but that's about it for the
real differences).
> > 3. have people just move to asciidoctor (it's way more actively
> > maintained and tested, plus, most package support both nowadays) and
> > just let the python implementation die naturally
>
> Ah, right, I was about to suggest that.
Yeah I think I'm going to push that way again.
That might give me a better idea of the pool of real users behind pure
asciidoc once I'm done.
Thanks for your answers! :)
 Joseph
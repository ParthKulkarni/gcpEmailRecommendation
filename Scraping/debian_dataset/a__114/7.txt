To : Holger Wansing <linux@wansing-online.de>, Cyril Brulebois <kibi@debian.org>
Subject : Re: d-i repo at dillon
From : Ian Campbell <ijc@hellion.org.uk>
Date : Sat, 16 Jun 2018 10:41:48 +0100
Message-id : 1529142108.16827.23.camel@hellion.org.uk
In-reply-to : <[ðŸ”Ž]Â 1529140655.16827.16.camel@hellion.org.uk>
References : <[ðŸ”Ž]Â 20180603153658.142ceab3e1cd888576e4433a@wansing-online.de>	 <[ðŸ”Ž]Â 20180603165747.fa3186463d5ca2d93e6799bb@wansing-online.de>	 <[ðŸ”Ž]Â 20180604013348.mb6wpa466rzaap5j@mraw.org>	 <[ðŸ”Ž]Â 20180612205157.9fa0a290b787b319f7c80ae1@wansing-online.de>	 <[ðŸ”Ž]Â 20180612190707.tps7c52vg4gpstma@mraw.org>	 <[ðŸ”Ž]Â 20180614203406.1b9b98a6fce5e6500318d897@wansing-online.de>	 <[ðŸ”Ž]Â 20180614205405.cb32bc220e4c2d6bbb08333b@wansing-online.de>	 <[ðŸ”Ž]Â 20180614203235.nehu75e4bxbfbsrr@mraw.org>	 <[ðŸ”Ž]Â 20180615220051.f9c1fe6f00575ca709650a8f@wansing-online.de>	 <[ðŸ”Ž]Â 20180615202541.f4bhyq3edlznteld@mraw.org>	 <[ðŸ”Ž]Â 20180616083642.c209568c471a66d7d320351a@wansing-online.de>	 <[ðŸ”Ž]Â 1529140655.16827.16.camel@hellion.org.uk>


On Sat, 2018-06-16 at 10:17 +0100, Ian Campbell wrote:
> On Sat, 2018-06-16 at 08:36 +0200, Holger Wansing wrote:
> > > The original/final lines are a bit strange, though, instead of
> having:
> > > 
> > >   if $($git foo bar); then â€¦ fi
> > > 
> > > I suppose it should only be:
> > > 
> > >   if $git foo bar; then â€¦ fi
> > 
> > However, with this simplified variant it fails. So I left it as is
> for now.
> 
> It seems there is an interesting (and new to me, or at least I'd
> never
> fully appreciated the behaviour) corner case of the `if $(foo); then`
> syntax, which is that if `foo` exits producing no output then its
> exit
> code is apparently used for the condition. If `foo` does produce
> output
> then the shell will attempt to execute that and use the resulting
> exit
> code.
> 
> These just run true or false and take the output:
Should be "These just run true or false and use the exit code".
BTW, it's worth mentioning that `true` and `false` here are actually
`/bin/{true,false}` i.e. literal commands which return the appropriate
exit code that the shell `fork`s and `exec`s. There's no shell syntax
magic[*] going on here where `true` and `false` are somehow parsed
specially.
Ian.
[*] technically `true` and `false` might be shell builtins for
performance reasons (and it looks like with `dash` `true` is but
`false` isn't). However logically they can be treated as external
commands without special handling. To be unambiguous you could rerun
all the examples using the explicit /bin/true etc versions directly.
>    $ dash -c 'if true ; then echo YES ; else echo NO ; fi'
>    YES
>    $ dash -c 'if false ; then echo YES ; else echo NO ; fi'
>    NO
Ian.
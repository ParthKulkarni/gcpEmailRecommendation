To : debian-devel@lists.debian.org
Subject : Re: Removal philosophy
From : Ole Streicher <olebole@debian.org>
Date : Sun, 22 Apr 2018 10:10:15 +0200
Message-id : 871sf7y848.fsf@debian.org
References : <[ðŸ”Ž]Â 20180421175755.GC3347@localhost> <[ðŸ”Ž]Â CAAajCMb9kN9bBq4tHFTa8bsB8xXMZHUzi55vvD2rvwvvCWCk_w@mail.gmail.com> <[ðŸ”Ž]Â 1812329.sJ2Wi57GIM@riemann>


Steve Robbins <steve@sumost.ca> writes:
> On Saturday, April 21, 2018 4:05:27 PM CDT Jeremy Bicha wrote:
>> But I think if we had that philosophy, we
>> wouldn't ever remove anything until identified security concerns force
>> it out.
>
> I don't see anything wrong with that philosophy.
>
> Assuming someone is willing to maintain a package and it isn't causing harm 
> ("security concerns"), why would one want to remove it?
Sure, *if* someone is willing to maintain. But, as a maintainer of a
number of Python packages, I want to get rid of Python 2 support ASAP:
* Many upstreams already drop Python 2 support from their newest
  releases. Keeping Python 2 would either mean to stay with the older
  version completely, or to split the source package into a Python 2
  and a Python 3 version. Both is ugly.
* Many sources, especially when they provide Python packages only as a
  secondary goal, are not supporting to build Python 2 and Python 3 at
  the same time. Aside from non-pythonic build systems (cmake for
  example), there are f.e. complications with tools built on top of the
  Python package.
* The EOL of Python 2 was announced long ago, but many people didn't
  switch just because it is still there and supported (experience from
  my surrounding). Keeping Python 2 supported only shifts the problem
  for them by another two years
So, while I would not *encourage* people to drop Python 2 support in
their packages, it is perfectly OK if a maintainer does so. If someone
else wants to jump in, he still can upload his own legacy Python 2
source package. And I will (recursively) remove Python 2 support from
the packages I maintain whenever I feel that support becomes difficult,
for any of the reasons stated above (with astropy as temporary
exception, due to the importance of the package).
Best regards
Ole
To : Adrian Bunk <bunk@debian.org>
Subject : Re: Debian part of a version number when epoch is bumped
From : "Christian T. Steigies" <cts@debian.org>
Date : Mon, 2 Apr 2018 20:30:54 +0200
Message-id : 20180402183054.dtfolncq2b27qg2g@guido.venus.sol
Mail-followup-to : "Christian T. Steigies" <cts@debian.org>,	Adrian Bunk <bunk@debian.org>, debian-devel@lists.debian.org
In-reply-to : <20180330112143.GY9516@localhost>
References : <CAAajCMZkzdQg5FS_PABLzyTu2QzJStfhtbseW7YazUyoSKipHQ@mail.gmail.com> <20180205160558.GY9661@mapreri.org> <CAAajCMZ5F+K7EPvv5dixN=WePvp046XgGbahsVFp20s=bPQY7Q@mail.gmail.com> <20180328213958.574tiau3ce45afy2@guido.venus.sol> <20180330112143.GY9516@localhost>


Moin,
On Fri, Mar 30, 2018 at 02:21:43PM +0300, Adrian Bunk wrote:
> 
> There are two problems here.
> 
> The first is the use of an epoch in a situation where it shouldn't be used.
> 
> The actual "trap" is when a maintainer used an epoch in such a situation.
> 
> Once introduced in a package an epoch cannot ever be undone, so all that 
> can be done on that is to make it clearer that it is wrong to use an 
> epoch in such cases.
I don't understand why everybody is so afraid of an epoch, but ok.
> The second problem is about filename overlap after incorrect epoch usage.
So the epoch is not really part of the version number, it is just there for
"sorting"?
> It is important to understand that this is only relevant for cases where 
> an epoch was used where it shouldn't have been:
> When an epoch is used as intended for a change in the upstream version 
> numbering scheme (e.g. from 20171224 to 1.0), there is no overlap in
> version numbers.
> 
> Launchpad gave an error on that, and this is better than the silent 
> breakage in Debian of the assumption that no filename is ever used twice 
> in Debian. I would consider it a bug in dak that it doesn't know about 
> all versions and filenames that ever existed in Debian.
ok
 
> It would be wrong to document in Debian policy that skipping Debian 
> revisions is required in such cases, since the only case where this
> second problem can happen is when a maintainer used an epoch in a
> situation where it shouldn't be used (first problem).[1]
> 
> For the future it should be documented better that using an epoch is 
> wrong in such cases, but for past incorrect epoch usage all that can
> be done is to limit the damage.
If this can't go into policy, then I hope it will go into the wiki or a
packaging best-practices or so.
 
> Things that cannot be undone for moon-buggy:
> - the epoch
> - two files moon-buggy_1.0.51-1.dsc exist in Debian,
>   with different contents [2]
> 
> What can be done for moon-buggy is to use a Debian revision that doesn't
> result in filenames that are duplicates with pre-epoch packages.
So what should I have done intially and what should I do now?
I should have uploaded the package as 1.0.51-12 even though I uploaded a
(new) orig.tar.gz?
Now I should upload it as 1:1.0.51-12 and be done with it?
No renaming of the orig.tar to 1.0.51+really1.0.51 neccessary?
thanks,
Christian
To : seamlik@debian.org, debian-devel@lists.debian.org
Subject : Re: Mono status
From : Marek Mosiewicz <marek.mosiewicz@jotel.com.pl>
Date : Mon, 10 Dec 2018 08:54:22 +0100
Message-id : 1544428462.1323.21.camel@jotel.com.pl
In-reply-to : <[ðŸ”Ž]Â 6dcbb859-42f5-d260-5575-aa7ec70d96d8@gmail.com>
References : <[ðŸ”Ž]Â 1544361243.1323.4.camel@jotel.com.pl>	 <[ðŸ”Ž]Â 6dcbb859-42f5-d260-5575-aa7ec70d96d8@gmail.com>


WÂ dniu 10.12.2018, pon oÂ godzinie 14âˆ¶18 +0800, uÅ¼ytkownik
seamlik@debian.org napisaÅ‚:
> > With current Oracle move to depreciate Swing GUI I just think to
> > have something different.
> 
> (A bit off-topic)
> 
> How about JavaFX/OpenJFX? The Java ecosystem is well maintained in
> Debian. Rewriting your Java projects in C# sounds like a lot of work.
I have been working Java for almost 20 years, but I'm somewhat terrfied
with current Oracle steps. They started to remove code from JDK
(currently just a few classes from they com pakcages). They removed
applets, WebStart etc. They depeciated Swing already. They are working
on completly new implementation of vm called Gral. If things will go
like this I'm not sure if somebody will have to fork openjdk to keep
things working.
But anyway I just think of things I forget working on Java. Directory
dlls of which you can start with is like heaven comparing to
classloader (it made sens when there were applets, but now it seems no
go). Calling native code is so difficult in Java. JavaFX become
separate project which no one knows where it will go. For business
logic .Net LINQ is nice, properties simplifies code etc.
Compiere (and its fork ADempiere) store generic forms definitions in
database so it is just to create generic display engine to make forms
working (not all, but most). Current business logic is not so
complicated there and writing it in C# or even Basic would in my
opinion make it scale better (in Java terms Kotlin language is
something similar to C#)
Anyway real problem as I mentioned is client. Generic forms are enough
for many use cases but not all. There is custom forms and logic you
need to have on client (going web for ERP is still not good option
IMO). In C/C++/NET you can download dll on demand and open it (ok
security). In Java you have classloader path which AFAIK can not be
modified (maybe I never tried to do this)
Having go .Net brings me another project in my mind called Tryton (http
://tryton.org). It is small ERP written in Python and GTK. Maybe with
engine rewrite it could be run on IronPython and incrementally be
extended to other .Net languages. 
>